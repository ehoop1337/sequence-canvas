{"version":3,"file":"sequence-canvas.js","mappings":"sCACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,62BCmKrEI,GACTC,KAAKC,OAAOF,GAAOG,MAAQ,UAC3BF,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAASC,MACvC,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAMV,KAAKC,OAAOF,GAAOY,KAC7BH,EAAII,OAAS,KACXZ,KAAKC,OAAOF,GAAOG,MAAQ,SAC3BF,KAAKC,OAAOF,GAAOc,MAAQL,EAC3BR,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAASQ,SAEpCT,EAAAL,KAAIe,EAAA,OAEHf,KAAKgB,kBACLhB,KAAKiB,kBACLjB,KAAKkB,oBAGPlB,KAAKmB,eAAiBnB,KAAKoB,WAAapB,KAAKqB,QAAUrB,KAAKsB,O,EAGhEd,EAAIe,QAAU,KACZvB,KAAKC,OAAOF,GAAOG,MAAQ,OAAO,CAEtC,EAACsB,EAAA,SAYaC,GACZC,EAAA1B,KAAIe,EAAcU,EAAW,IAC/B,EAACE,EAAA,WAYCtB,EAAAL,KAAI4B,EAAA,IAAAJ,GAAc1B,KAAlBE,MAAmB,GACnBA,KAAK6B,UAAU7B,KAAKmB,cACpBO,EAAA1B,KAAI8B,EAAgB,IAAO9B,KAAK+B,IAAG,KACnCL,EAAA1B,KAAIgC,EAASC,KAAKC,MAAK,KACvBR,EAAA1B,KAAImC,EAAc9B,EAAAL,KAAIgC,EAAA,KAAM,KAC5B3B,EAAAL,KAAIoC,EAAA,KAAQtC,KAAZE,KACF,EAACqC,EAAA,WAmCKrC,KAAKsC,UAAY,EACftC,KAAKuC,KACHvC,KAAKmB,eAAiBnB,KAAKwC,YAC7BxC,KAAKyC,gBAAgBzC,KAAKoB,YAE1BpB,KAAKyC,gBAAgBzC,KAAKmB,aAAe,GAGvCnB,KAAKmB,eAAiBnB,KAAKwC,YAC7BnC,EAAAL,KAAI4B,EAAA,IAAAJ,GAAc1B,KAAlBE,MAAmB,GAEnBA,KAAKyC,gBAAgBzC,KAAKmB,aAAe,GAIzCnB,KAAKuC,KACHvC,KAAKmB,eAAiBnB,KAAKoB,WAC7BpB,KAAKyC,gBAAgBzC,KAAKwC,aAE1BxC,KAAKyC,gBAAgBzC,KAAKmB,aAAe,GAGvCnB,KAAKmB,eAAiBnB,KAAKoB,WAC7Bf,EAAAL,KAAI4B,EAAA,IAAAJ,GAAc1B,KAAlBE,MAAmB,GAEnBA,KAAKyC,gBAAgBzC,KAAKmB,aAAe,GAI/CnB,KAAK6B,UAAU7B,KAAKmB,aACtB,E,QAtOF,MA4DEuB,WAAAA,CAAYC,G,8FA1DZ,KAAAxC,YAA4ByC,EAC5B,KAAAC,aAAoCD,EACpC,KAAAE,kBAAuBF,EACvB,KAAAG,iBAAsBH,EAGtB,KAAA3C,YAAqC2C,EACrC,KAAAI,sBAA4BJ,EAC5B,KAAAK,gBAAqBL,EACrB,KAAAM,gBAAqBN,EACrB,KAAAO,kBAAwBP,EACxB,KAAAQ,iBAAsBR,EACtB,KAAAS,kBAAuBT,EACvB,KAAAU,kBAAwBV,EACxB,KAAAW,iBAAsBX,EACtB,KAAAY,iBAAsBZ,EACtB,KAAAa,qBAA0Bb,EAC1B,KAAAc,sBAA2Bd,EAG3B,KAAAb,SAAca,EACd,KAAAN,eAAqCM,EACrC,KAAAL,UAAgBK,EAChB,KAAAxB,gBAAqBwB,EACrB,KAAAJ,iBAAsBI,EACtB,KAAAzB,kBAAuByB,EACvB,KAAA5B,sBAA4B4B,EAC5B,KAAA3B,sBAA4B2B,EAC5B,KAAAe,UAAoB,EACpB,KAAAC,SAAmB,EAGnB7C,EAAA8C,IAAA,MAAsB,GACtBC,EAAAD,IAAA,aACA/B,EAAA+B,IAAA,aACAE,EAAAF,IAAA,aACA7B,EAAA6B,IAAA,aACA1B,EAAA0B,IAAA,aACAG,EAAAH,IAAA,aAGAvD,EAAAuD,IAAA,KAAU,CACRI,KAAM,IAAIC,MAAM,OAAQ,CAACC,SAAS,IAClC5D,KAAM,IAAI2D,MAAM,OAAQ,CAACC,SAAS,IAClCrD,OAAQ,IAAIoD,MAAM,SAAU,CAACC,SAAS,IACtCC,OAAQ,IAAIF,MAAM,SAAU,CAACC,SAAS,IACtC9C,MAAO,IAAI6C,MAAM,QAAS,CAACC,SAAS,IACpC7C,KAAM,IAAI4C,MAAM,OAAQ,CAACC,SAAS,IAClCE,KAAM,IAAIH,MAAM,OAAQ,CAACC,SAAS,IAClCG,MAAO,IAAIJ,MAAM,QAAS,CAACC,SAAS,MA6HtC/B,EAAAyB,IAAA,MAAU,KACHxD,EAAAL,KAAIe,EAAA,MAITW,EAAA1B,KAAI8D,EAAcS,sBAAsBlE,EAAAL,KAAIoC,EAAA,MAAS,KACrDV,EAAA1B,KAAI+D,EAAQ9B,KAAKC,MAAK,KACtBR,EAAA1B,KAAIgE,EAAY3D,EAAAL,KAAI+D,EAAA,KAAQ1D,EAAAL,KAAIgC,EAAA,KAAM,KAClC3B,EAAAL,KAAIgE,EAAA,KAAY3D,EAAAL,KAAI8B,EAAA,OACtBJ,EAAA1B,KAAIgC,EAAS3B,EAAAL,KAAI+D,EAAA,KAAS1D,EAAAL,KAAIgE,EAAA,KAAY3D,EAAAL,KAAI8B,EAAA,KAAc,KAC5DzB,EAAAL,KAAI4B,EAAA,IAAAS,GAAOvC,KAAXE,QARIK,EAAAL,KAAI8D,EAAA,MAAaU,qBAAqBnE,EAAAL,KAAI8D,EAAA,K,IApHhD9D,KAAKG,OAASwC,EAASxC,OAAOsE,QAC9BzE,KAAK6C,QAAU7C,KAAKG,OAAOuE,WAAW,MACtC1E,KAAK+C,YAAcJ,EAASxC,OAAOwE,MACnC3E,KAAK8C,aAAeH,EAASxC,OAAOyE,OAGpC5E,KAAKC,OAAS0C,EAAS1C,OAAO4E,MAAMC,KAAKnE,IAChC,CAACA,OAAMT,MAAO,WAEvBF,KAAKgD,sBAA0DJ,KAAf,QAAxBmC,EAAe,QAAfC,EAAArC,EAAS1C,cAAM,IAAA+E,OAAA,EAAAA,EAAEC,eAAO,IAAAF,OAAA,EAAAA,EAAEG,UAClDlF,KAAKiD,WAA+C,QAAlCkC,EAAwB,QAAxBC,EAAe,QAAfC,EAAA1C,EAAS1C,cAAM,IAAAoF,OAAA,EAAAA,EAAEJ,eAAO,IAAAG,OAAA,EAAAA,EAAEF,gBAAQ,IAAAC,OAAA,EAAAA,EAAEG,EACtDtF,KAAKkD,WAA+C,QAAlCqC,EAAwB,QAAxBC,EAAe,QAAfC,EAAA9C,EAAS1C,cAAM,IAAAwF,OAAA,EAAAA,EAAER,eAAO,IAAAO,OAAA,EAAAA,EAAEN,gBAAQ,IAAAK,OAAA,EAAAA,EAAEG,EACtD1F,KAAKmD,kBAAkDP,KAAX,QAAxB+C,EAAe,QAAfC,EAAAjD,EAAS1C,cAAM,IAAA2F,OAAA,EAAAA,EAAEX,eAAO,IAAAU,OAAA,EAAAA,EAAEE,MAC9C7F,KAAKoD,YAA4C,QAA9B0C,EAAwB,QAAxBC,EAAe,QAAfC,EAAArD,EAAS1C,cAAM,IAAA+F,OAAA,EAAAA,EAAEf,eAAO,IAAAc,OAAA,EAAAA,EAAEF,YAAI,IAAAC,OAAA,EAAAA,EAAEnB,MACnD3E,KAAKqD,aAA6C,QAA9B4C,EAAwB,QAAxBC,EAAe,QAAfC,EAAAxD,EAAS1C,cAAM,IAAAkG,OAAA,EAAAA,EAAElB,eAAO,IAAAiB,OAAA,EAAAA,EAAEL,YAAI,IAAAI,OAAA,EAAAA,EAAErB,OACpD5E,KAAKsD,kBAAkDV,KAAX,QAAxBwD,EAAe,QAAfC,EAAA1D,EAAS1C,cAAM,IAAAoG,OAAA,EAAAA,EAAEpB,eAAO,IAAAmB,OAAA,EAAAA,EAAEE,MAC9CtG,KAAKuD,YAA4C,QAA9BgD,EAAwB,QAAxBC,EAAe,QAAfC,EAAA9D,EAAS1C,cAAM,IAAAwG,OAAA,EAAAA,EAAExB,eAAO,IAAAuB,OAAA,EAAAA,EAAEF,YAAI,IAAAC,OAAA,EAAAA,EAAEjB,EACnDtF,KAAKwD,YAA4C,QAA9BkD,EAAwB,QAAxBC,EAAe,QAAfC,EAAAjE,EAAS1C,cAAM,IAAA2G,OAAA,EAAAA,EAAE3B,eAAO,IAAA0B,OAAA,EAAAA,EAAEL,YAAI,IAAAI,OAAA,EAAAA,EAAEhB,EACnD1F,KAAKyD,gBAAgD,QAA9BoD,EAAwB,QAAxBC,EAAe,QAAfC,EAAApE,EAAS1C,cAAM,IAAA8G,OAAA,EAAAA,EAAE9B,eAAO,IAAA6B,OAAA,EAAAA,EAAER,YAAI,IAAAO,OAAA,EAAAA,EAAElC,MACvD3E,KAAK0D,iBAAiD,QAA9BsD,EAAwB,QAAxBC,EAAe,QAAfC,EAAAvE,EAAS1C,cAAM,IAAAiH,OAAA,EAAAA,EAAEjC,eAAO,IAAAgC,OAAA,EAAAA,EAAEX,YAAI,IAAAU,OAAA,EAAAA,EAAEpC,OAGxD5E,KAAK+B,IAA8B,iBAAjBY,EAASZ,KAAoB,IAAMY,EAASZ,KAAOY,EAASZ,IAAM,EAAIY,EAASZ,IAAM,GACvG/B,KAAKsC,UAA8B,QAAlB6E,EAAAxE,EAASL,iBAAS,IAAA6E,EAAAA,EAAI,EACvCnH,KAAKuC,KAAoB,QAAb6E,EAAAzE,EAASJ,YAAI,IAAA6E,GAAAA,EACzBpH,KAAKoB,WAAgC,QAAnBiG,EAAA1E,EAASvB,kBAAU,IAAAiG,EAAAA,EAAI,EACzCrH,KAAKwC,YAAkC,QAApB8E,EAAA3E,EAASH,mBAAW,IAAA8E,EAAAA,EAAK3E,EAAS1C,OAAO4E,MAAM0C,OAAS5E,EAAS1C,OAAO4E,MAAM0C,OAAS,EAAI,EAC9GvH,KAAKmB,aAAoC,QAArBqG,EAAA7E,EAASxB,oBAAY,IAAAqG,EAAAA,EAAI,EAC7CxH,KAAKgB,iBAA4C,QAAzByG,EAAA9E,EAAS3B,wBAAgB,IAAAyG,GAAAA,EACjDzH,KAAKiB,iBAA4C,QAAzByG,EAAA/E,EAAS1B,wBAAgB,IAAAyG,GAAAA,EACjD1H,KAAK2D,SAAwB,QAAbgE,EAAAhF,EAASsB,YAAI,IAAA0D,GAAAA,EAC7B3H,KAAK4D,QAA0B,QAAhBgE,EAAAjF,EAASiB,eAAO,IAAAgE,GAAAA,EAE3B5H,KAAK2D,UACP3D,KAAKiE,MAET,CAgJApC,SAAAA,CAAUgG,GACR,GAAsC,WAAlC7H,KAAKC,OAAO4H,GAAY3H,OAAuBF,KAAKC,OAAO4H,GAAYhH,MAA3E,CAQA,GAJAb,KAAK6C,QAAQiF,UAAU,EAAG,EAAG9H,KAAKG,OAAOwE,MAAO3E,KAAKG,OAAOyE,QACxD5E,KAAK4D,SAASmE,QAAQC,IAAI,YAAaH,EAAY7H,KAAKC,OAAO4H,IACnE7H,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAAS8D,QAEnCpE,KAAKsD,aAAc,CACrB,GAAItD,KAAKmD,cAAgBnD,KAAKgD,iBAa5B,YAXAhD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxBb,KAAKuD,YACLvD,KAAKwD,YACLxD,KAAKyD,gBACLzD,KAAK0D,iBACL1D,KAAKiD,WACLjD,KAAKkD,WACLlD,KAAKoD,YACLpD,KAAKqD,cAGF,GAAIrD,KAAKmD,aAad,YAXAnD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxBb,KAAKuD,YACLvD,KAAKwD,YACLxD,KAAKyD,gBACLzD,KAAK0D,iBACL,EACA,EACA1D,KAAKoD,YACLpD,KAAKqD,cAGErD,KAAKgD,iBAEdhD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxBb,KAAKuD,YACLvD,KAAKwD,YACLxD,KAAK+C,YACL/C,KAAK8C,aACL9C,KAAKiD,WACLjD,KAAKkD,WACLlD,KAAKoD,YACLpD,KAAKqD,cAIPrD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxBb,KAAKuD,YACLvD,KAAKwD,YACLxD,KAAK+C,YACL/C,KAAK8C,aACL,EACA,EACA9C,KAAKoD,YACLpD,KAAKqD,a,CAKX,GAAIrD,KAAKmD,aACP,OAAInD,KAAKgD,sBAEPhD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxBb,KAAKiD,WACLjD,KAAKkD,WACLlD,KAAKoD,YACLpD,KAAKqD,mBAKPrD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxB,EACA,EACAb,KAAKoD,YACLpD,KAAKqD,cAMPrD,KAAKgD,iBAEPhD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxBb,KAAKiD,WACLjD,KAAKkD,YAMTlD,KAAK6C,QAAQhB,UACX7B,KAAKC,OAAO4H,GAAYhH,MACxB,EACA,E,MAvGIb,KAAK4D,SAASmE,QAAQC,IAAI,eAAgBH,EAAY7H,KAAKC,OAAO4H,GAyG1E,CAWA5D,IAAAA,GACEjE,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAAS2D,MACvCjE,KAAKiI,eAAe,CAACtD,MAAO3E,KAAK+C,YAAa6B,OAAQ5E,KAAK8C,eAC3D9C,KAAKC,OAAOiI,SAAQ,CAACC,EAAGpI,KACtBM,EAAAL,KAAI4B,EAAA,IAAAwG,GAAWtI,KAAfE,KAAgBD,EAAM,GAE1B,CAWAmB,cAAAA,GACE,OAAOlB,KAAKC,OAAOoI,OAAM7H,GAAqB,WAAdA,EAAIN,OACtC,CAWAoI,iBAAAA,GACE,OAAOtI,KAAKC,OAAOsI,MAAK/H,GAAqB,UAAdA,EAAIN,OACrC,CAWAmB,KAAAA,GACErB,KAAKmB,aAAenB,KAAKoB,WACzBpB,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAASe,OACvChB,EAAAL,KAAI4B,EAAA,IAAAD,GAAa7B,KAAjBE,KACF,CAYAsB,IAAAA,GACEtB,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAASgB,MACvCjB,EAAAL,KAAI4B,EAAA,IAAAD,GAAa7B,KAAjBE,KACF,CAWAqE,IAAAA,GACErE,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAAS+D,MACvChE,EAAAL,KAAI4B,EAAA,IAAAJ,GAAc1B,KAAlBE,MAAmB,GACnBA,KAAKyC,gBAAgBzC,KAAKoB,WAC5B,CAWAkD,KAAAA,GACEtE,KAAKG,OAAOC,cAAcC,EAAAL,KAAIM,EAAA,KAASgE,OACvCjE,EAAAL,KAAI4B,EAAA,IAAAJ,GAAc1B,KAAlBE,MAAmB,EACrB,CAYAyC,eAAAA,CAAgBoF,GACd7H,KAAKmB,aAAe0G,CACtB,CAYAI,cAAAA,CAAeO,GACTA,EAAM7D,OACR3E,KAAKG,OAAOwE,MAAQ6D,EAAM7D,MAC1B3E,KAAK+C,YAAcyF,EAAM7D,OAEzB3E,KAAK+C,YAAc/C,KAAKG,OAAOwE,MAE7B6D,EAAM5D,QACR5E,KAAKG,OAAOyE,OAAS4D,EAAM5D,OAC3B5E,KAAK8C,aAAe0F,EAAM5D,QAE1B5E,KAAK8C,aAAe9C,KAAKG,OAAOyE,MAEpC,CAEA6D,EAAAA,CAAGC,EAAgCC,GACjC3I,KAAKG,OAAOyI,iBAAiBF,EAAWC,EAASE,KAAK7I,MACxD,E","sources":["webpack://SequenceCanvas/webpack/bootstrap","webpack://SequenceCanvas/webpack/runtime/define property getters","webpack://SequenceCanvas/webpack/runtime/hasOwnProperty shorthand","webpack://SequenceCanvas/./index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export type StateImageSequenceCanvas = 'WAIT' | 'LOADING' | 'LOADED' | 'ERROR';\nexport type DirectionSequenceCanvas = -1 | 1;\nexport type EventSequenceCanvas = 'init' | 'load' | 'loaded' | 'render' | 'start' | 'play' | 'stop' | 'pause';\n\nexport interface SettingsSequenceCanvas {\n  canvas: {\n    element: HTMLCanvasElement;\n    width?: number;\n    height?: number;\n  };\n  images: {\n    paths: Array<string>;\n    options?: {\n      position?: {\n        x: number;\n        y: number;\n      }\n      trim?: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n      }\n      size?: {\n        width: number;\n        height: number;\n      }\n    }\n  };\n  init?: boolean;\n  direction?: DirectionSequenceCanvas\n  loop?: boolean;\n  fps?: number;\n  startIndex?: number;\n  finishIndex?: number;\n  currentIndex?: number;\n  startImmediately?: boolean;\n  startAfterLoaded?: boolean;\n  logging?: boolean;\n}\n\nexport interface ImageSequenceCanvas {\n  path: string;\n  state: StateImageSequenceCanvas;\n  image?: HTMLImageElement;\n}\n\n/**\n * Creates a new sequence canvas.\n * @name SequenceCanvas\n * @class\n */\n\nexport default class SequenceCanvas {\n  // Canvas\n  canvas: HTMLCanvasElement = undefined;\n  context: CanvasRenderingContext2D = undefined;\n  heightCanvas: number = undefined;\n  widthCanvas: number = undefined;\n\n  // Images\n  images: Array<ImageSequenceCanvas> = undefined;\n  isPositionImages: boolean = undefined;\n  xPosImages: number = undefined;\n  yPosImages: number = undefined;\n  isSizeImages: boolean = undefined;\n  widthImages: number = undefined;\n  heightImages: number = undefined;\n  isTrimImages: boolean = undefined;\n  xTrimImages: number = undefined;\n  yTrimImages: number = undefined;\n  widthTrimImages: number = undefined;\n  heightTrimImages: number = undefined;\n\n  // Optional\n  fps: number = undefined;\n  direction: DirectionSequenceCanvas = undefined;\n  loop: boolean = undefined;\n  startIndex: number = undefined;\n  finishIndex: number = undefined;\n  currentIndex: number = undefined;\n  startImmediately: boolean = undefined;\n  startAfterLoaded: boolean = undefined;\n  initiate: boolean = false;\n  logging: boolean = false;\n\n  // Domestic\n  #rendering: boolean = false;\n  #requestId: number;\n  #fpsInterval: number;\n  #now: number;\n  #then: number;\n  #startTime: number;\n  #elapsed: number;\n\n  // Events\n  #events = {\n    init: new Event('init', {bubbles: true}),\n    load: new Event('load', {bubbles: true}),\n    loaded: new Event('loaded', {bubbles: true}),\n    render: new Event('render', {bubbles: true}),\n    start: new Event('start', {bubbles: true}),\n    play: new Event('play', {bubbles: true}),\n    stop: new Event('stop', {bubbles: true}),\n    pause: new Event('pause', {bubbles: true}),\n  }\n\n  /**\n   * Create a point.\n   * @constructor\n   * @param {SettingsSequenceCanvas} settings - Settings for creating a new instance\n   */\n\n  constructor(settings: SettingsSequenceCanvas) {\n    // Canvas\n    this.canvas = settings.canvas.element;\n    this.context = this.canvas.getContext(\"2d\");\n    this.widthCanvas = settings.canvas.width;\n    this.heightCanvas = settings.canvas.height;\n\n    // Images\n    this.images = settings.images.paths.map((path) => {\n      return {path, state: 'WAIT'};\n    });\n    this.isPositionImages = settings.images?.options?.position !== undefined;\n    this.xPosImages = settings.images?.options?.position?.x;\n    this.yPosImages = settings.images?.options?.position?.y;\n    this.isSizeImages = settings.images?.options?.size !== undefined;\n    this.widthImages = settings.images?.options?.size?.width;\n    this.heightImages = settings.images?.options?.size?.height;\n    this.isTrimImages = settings.images?.options?.trim !== undefined;\n    this.xTrimImages = settings.images?.options?.trim?.x;\n    this.yTrimImages = settings.images?.options?.trim?.y;\n    this.widthTrimImages = settings.images?.options?.trim?.width;\n    this.heightTrimImages = settings.images?.options?.trim?.height;\n\n    // Optional\n    this.fps = typeof settings.fps === 'number' && 60 >= settings.fps && settings.fps > 0 ? settings.fps : 60;\n    this.direction = settings.direction ?? 1;\n    this.loop = settings.loop ?? true;\n    this.startIndex = settings.startIndex ?? 0;\n    this.finishIndex = settings.finishIndex ?? (settings.images.paths.length ? settings.images.paths.length - 1 : 0);\n    this.currentIndex = settings.currentIndex ?? 0;\n    this.startImmediately = settings.startImmediately ?? false;\n    this.startAfterLoaded = settings.startAfterLoaded ?? true;\n    this.initiate = settings.init ?? true;\n    this.logging = settings.logging ?? false;\n\n    if (this.initiate) {\n      this.init();\n    }\n  }\n\n  /**\n   * This method loads the image by index.\n   *\n   * @method\n   * @private\n   * @name this.#loadImage\n   * @param {number} index Index of element in image array.\n   * @return {void}\n   */\n\n  #loadImage(index: number): void {\n    this.images[index].state = 'LOADING';\n    this.canvas.dispatchEvent(this.#events.load);\n    const img = new Image();\n    img.src = this.images[index].path;\n    img.onload = () => {\n      this.images[index].state = 'LOADED';\n      this.images[index].image = img;\n      this.canvas.dispatchEvent(this.#events.loaded);\n      if (\n        !this.#rendering &&\n        (\n          this.startImmediately ||\n          this.startAfterLoaded &&\n          this.isLoadedFrames()\n        )\n      ) {\n        this.currentIndex === this.startIndex ? this.start() : this.play();\n      }\n    };\n    img.onerror = () => {\n      this.images[index].state = 'ERROR';\n    };\n  }\n\n  /**\n   * Changing the rendering flag.\n   *\n   * @method\n   * @private\n   * @name this.#setRendering\n   * @param {boolean} isRendering\n   * @return {void}\n   */\n\n  #setRendering(isRendering: boolean): void {\n    this.#rendering = isRendering;\n  }\n\n  /**\n   * The method starts the rendering loop\n   *\n   * @method\n   * @private\n   * @name this.#startRender\n   * @return {void}\n   */\n\n  #startRender(): void {\n    this.#setRendering(true);\n    this.drawImage(this.currentIndex);\n    this.#fpsInterval = 1000 / this.fps;\n    this.#then = Date.now();\n    this.#startTime = this.#then;\n    this.#render();\n  }\n\n  /**\n   * The method is loop rendering.\n   *\n   * @method\n   * @private\n   * @name this.#render\n   * @return {void}\n   */\n\n  #render = (): void => {\n    if (!this.#rendering) {\n      if (this.#requestId) cancelAnimationFrame(this.#requestId);\n      return;\n    }\n    this.#requestId = requestAnimationFrame(this.#render);\n    this.#now = Date.now();\n    this.#elapsed = this.#now - this.#then;\n    if (this.#elapsed > this.#fpsInterval) {\n      this.#then = this.#now - (this.#elapsed % this.#fpsInterval);\n      this.#logic();\n    }\n  }\n\n  /**\n   * Logic for changing images\n   *\n   * @method\n   * @private\n   * @name this.#logic\n   * @return {void}\n   */\n\n  #logic() {\n    if (this.direction > 0) {\n      if (this.loop) {\n        if (this.currentIndex === this.finishIndex) {\n          this.setCurrentImage(this.startIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      } else {\n        if (this.currentIndex === this.finishIndex) {\n          this.#setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      }\n    } else {\n      if (this.loop) {\n        if (this.currentIndex === this.startIndex) {\n          this.setCurrentImage(this.finishIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      } else {\n        if (this.currentIndex === this.startIndex) {\n          this.#setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      }\n    }\n    this.drawImage(this.currentIndex);\n  }\n\n  /**\n   * Drawing an image by index\n   *\n   * @method\n   * @public\n   * @name drawImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  drawImage(indexImage: number): void {\n    if (this.images[indexImage].state !== 'LOADED' || !this.images[indexImage].image) {\n      if (this.logging) console.log('not rendered', indexImage, this.images[indexImage]);\n      return;\n    }\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    if (this.logging) console.log('rendered:', indexImage, this.images[indexImage]);\n    this.canvas.dispatchEvent(this.#events.render);\n\n    if (this.isTrimImages) {\n      if (this.isSizeImages && this.isPositionImages) {\n        // trim + size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isSizeImages) {\n        // trim + size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isPositionImages) {\n        // trim + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n      } else {\n        // trim\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n      }\n    }\n\n    if (this.isSizeImages) {\n      if (this.isPositionImages) {\n        // size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else {\n        // size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      }\n    }\n\n    if (this.isPositionImages) {\n      // pos\n      this.context.drawImage(\n        this.images[indexImage].image,\n        this.xPosImages,\n        this.yPosImages,\n      );\n      return;\n    }\n\n    // default\n    this.context.drawImage(\n      this.images[indexImage].image,\n      0,\n      0,\n    );\n  }\n\n  /**\n   * Initializing canvas and image array (possibly downloading them)\n   *\n   * @method\n   * @public\n   * @name init\n   * @return {void}\n   */\n\n  init(): void {\n    this.canvas.dispatchEvent(this.#events.init);\n    this.setSizesCanvas({width: this.widthCanvas, height: this.heightCanvas});\n    this.images.forEach((_, index) => {\n      this.#loadImage(index);\n    })\n  }\n\n  /**\n   * This method checks if all images are loaded\n   *\n   * @method\n   * @public\n   * @name isLoadedFrames\n   * @return {boolean}\n   */\n\n  isLoadedFrames(): boolean {\n    return this.images.every(img => img.state === \"LOADED\")\n  }\n\n  /**\n   * The method checks whether at least one image had a problem loading\n   *\n   * @method\n   * @public\n   * @name isErrorLoadFrames\n   * @return {boolean}\n   */\n\n  isErrorLoadFrames(): boolean {\n    return this.images.some(img => img.state === \"ERROR\")\n  }\n\n  /**\n   * Start rendering from the starting image\n   *\n   * @method\n   * @public\n   * @name start\n   * @return {void}\n   */\n\n  start(): void {\n    this.currentIndex = this.startIndex;\n    this.canvas.dispatchEvent(this.#events.start);\n    this.#startRender();\n  }\n\n  /**\n   * Start rendering from the current image\n   *\n   * @method\n   * @public\n   * @name play\n   * @return {void}\n   */\n\n  // Запуск рендеринга\n  play(): void {\n    this.canvas.dispatchEvent(this.#events.play);\n    this.#startRender();\n  }\n\n  /**\n   * Pausing rendering and displaying the initial image\n   *\n   * @method\n   * @public\n   * @name stop\n   * @return {void}\n   */\n\n  stop(): void {\n    this.canvas.dispatchEvent(this.#events.stop);\n    this.#setRendering(false);\n    this.setCurrentImage(this.startIndex);\n  }\n\n  /**\n   * Pause rendering\n   *\n   * @method\n   * @public\n   * @name pause\n   * @return {void}\n   */\n\n  pause() {\n    this.canvas.dispatchEvent(this.#events.pause);\n    this.#setRendering(false);\n  }\n\n  /**\n   * Set current image\n   *\n   * @method\n   * @public\n   * @name setCurrentImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  setCurrentImage(indexImage: number): void {\n    this.currentIndex = indexImage;\n  }\n\n  /**\n   * The method sets the size of the canvas\n   *\n   * @method\n   * @public\n   * @name setSizesCanvas\n   * @param {width: number, height: number} sizes Dimensions\n   * @return {void}\n   */\n\n  setSizesCanvas(sizes: {width?: number; height?: number}) {\n    if (sizes.width) {\n      this.canvas.width = sizes.width;\n      this.widthCanvas = sizes.width;\n    } else {\n      this.widthCanvas = this.canvas.width;\n    }\n    if (sizes.height) {\n      this.canvas.height = sizes.height;\n      this.heightCanvas = sizes.height;\n    } else {\n      this.heightCanvas = this.canvas.height;\n    }\n  }\n\n  on(eventName: EventSequenceCanvas, callback: (event: CustomEvent) => void) {\n    this.canvas.addEventListener(eventName, callback.bind(this));\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","index","this","images","state","canvas","dispatchEvent","__classPrivateFieldGet","_SequenceCanvas_events","load","img","Image","src","path","onload","image","loaded","_SequenceCanvas_rendering","startImmediately","startAfterLoaded","isLoadedFrames","currentIndex","startIndex","start","play","onerror","_SequenceCanvas_setRendering","isRendering","__classPrivateFieldSet","_SequenceCanvas_startRender","_SequenceCanvas_instances","drawImage","_SequenceCanvas_fpsInterval","fps","_SequenceCanvas_then","Date","now","_SequenceCanvas_startTime","_SequenceCanvas_render","_SequenceCanvas_logic","direction","loop","finishIndex","setCurrentImage","constructor","settings","undefined","context","heightCanvas","widthCanvas","isPositionImages","xPosImages","yPosImages","isSizeImages","widthImages","heightImages","isTrimImages","xTrimImages","yTrimImages","widthTrimImages","heightTrimImages","initiate","logging","set","_SequenceCanvas_requestId","_SequenceCanvas_now","_SequenceCanvas_elapsed","init","Event","bubbles","render","stop","pause","requestAnimationFrame","cancelAnimationFrame","element","getContext","width","height","paths","map","_b","_a","options","position","_e","_d","_c","x","_h","_g","_f","y","_k","_j","size","_o","_m","_l","_r","_q","_p","_t","_s","trim","_w","_v","_u","_z","_y","_x","_2","_1","_0","_5","_4","_3","_6","_7","_8","_9","length","_10","_11","_12","_13","_14","indexImage","clearRect","console","log","setSizesCanvas","forEach","_","_SequenceCanvas_loadImage","every","isErrorLoadFrames","some","sizes","on","eventName","callback","addEventListener","bind"],"sourceRoot":""}