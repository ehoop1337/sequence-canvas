{"version":3,"file":"sequence-canvas.js","mappings":"sCACA,IAAIA,EAAsB,CCA1BA,EAAwB,CAACC,EAASC,KACjC,IAAI,IAAIC,KAAOD,EACXF,EAAoBI,EAAEF,EAAYC,KAASH,EAAoBI,EAAEH,EAASE,IAC5EE,OAAOC,eAAeL,EAASE,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDH,EAAwB,CAACS,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,I,wWCsElF,MA8DEI,WAAAA,CAAYC,G,kFA5DI,KAAAC,YAA4BC,EAC5B,KAAAC,aAAoCD,EAC5C,KAAAE,kBAAuBF,EACvB,KAAAG,iBAAsBH,EAGb,KAAAI,YAAqCJ,EAC9C,KAAAK,sBAA4BL,EAC5B,KAAAM,gBAAqBN,EACrB,KAAAO,gBAAqBP,EACrB,KAAAQ,kBAAwBR,EACxB,KAAAS,iBAAsBT,EACtB,KAAAU,kBAAuBV,EACvB,KAAAW,kBAAwBX,EACxB,KAAAY,iBAAsBZ,EACtB,KAAAa,iBAAsBb,EACtB,KAAAc,qBAA0Bd,EAC1B,KAAAe,sBAA2Bf,EAG3B,KAAAgB,SAAchB,EACd,KAAAiB,eAAqCjB,EACrC,KAAAkB,UAAgBlB,EAChB,KAAAmB,gBAAqBnB,EACrB,KAAAoB,iBAAsBpB,EACtB,KAAAqB,kBAAuBrB,EACd,KAAAsB,sBAA4BtB,EAC5B,KAAAuB,sBAA4BvB,EAC5B,KAAAwB,UAAoB,EAC7B,KAAAC,SAAmB,EAGnB,KAAAC,WAAqB,EASrB,KAAAC,OAAS,CACfC,KAAM,IAAIC,YAAY,OAAQ,CAACC,SAAS,IACxCC,KAAM,IAAIF,YAAY,OAAQ,CAACC,SAAS,IACxCE,OAAQ,IAAIH,YAAY,SAAU,CAACC,SAAS,IAC5CG,OAAQ,IAAIJ,YAAY,SAAU,CAACC,SAAS,IAC5CI,MAAO,IAAIL,YAAY,QAAS,CAACC,SAAS,IAC1CK,KAAM,IAAIN,YAAY,OAAQ,CAACC,SAAS,IACxCM,KAAM,IAAIP,YAAY,OAAQ,CAACC,SAAS,IACxCO,MAAO,IAAIR,YAAY,QAAS,CAACC,SAAS,KA2I5CQ,EAAAC,IAAA,MAAU,KACHC,KAAKd,WAIVc,KAAKC,UAAYC,sBAAsBC,EAAAH,KAAIF,EAAA,MAC3CE,KAAKI,IAAMC,KAAKD,MAChBJ,KAAKM,QAAUN,KAAKI,IAAMJ,KAAKO,KAC3BP,KAAKM,QAAUN,KAAKQ,cACtBR,KAAKO,KAAOP,KAAKI,IAAOJ,KAAKM,QAAUN,KAAKQ,YAC5CR,KAAKS,UARDT,KAAKC,WAAWS,qBAAqBV,KAAKC,U,IAkS1C,KAAAU,iCAAoCC,IAC1C,GAAIA,EACF,IAAK,IAAIlE,KAAOkE,EACdZ,KAAKzC,OAAOsD,iBAAiBnE,EAAKkE,EAAUlE,GAAKoE,KAAKd,M,EAra1DA,KAAKzC,OAASD,EAASC,OAAOwD,QAC9Bf,KAAKvC,QAAUuC,KAAKzC,OAAOyD,WAAW,MACtChB,KAAKrC,YAAcL,EAASC,OAAO0D,MACnCjB,KAAKtC,aAAeJ,EAASC,OAAO2D,OAGpClB,KAAKpC,OAASN,EAASM,OAAOuD,MAAMC,KAAKC,IAChC,CAACA,OAAMC,MAAO,WAEvBtB,KAAKnC,sBAA0DL,KAAf,QAAxB+D,EAAe,QAAfC,EAAAlE,EAASM,cAAM,IAAA4D,OAAA,EAAAA,EAAEC,eAAO,IAAAF,OAAA,EAAAA,EAAEG,UAClD1B,KAAKlC,WAA+C,QAAlC6D,EAAwB,QAAxBC,EAAe,QAAfC,EAAAvE,EAASM,cAAM,IAAAiE,OAAA,EAAAA,EAAEJ,eAAO,IAAAG,OAAA,EAAAA,EAAEF,gBAAQ,IAAAC,OAAA,EAAAA,EAAEG,EACtD9B,KAAKjC,WAA+C,QAAlCgE,EAAwB,QAAxBC,EAAe,QAAfC,EAAA3E,EAASM,cAAM,IAAAqE,OAAA,EAAAA,EAAER,eAAO,IAAAO,OAAA,EAAAA,EAAEN,gBAAQ,IAAAK,OAAA,EAAAA,EAAEG,EACtDlC,KAAKhC,kBAAkDR,KAAX,QAAxB2E,EAAe,QAAfC,EAAA9E,EAASM,cAAM,IAAAwE,OAAA,EAAAA,EAAEX,eAAO,IAAAU,OAAA,EAAAA,EAAEE,MAC9CrC,KAAK/B,YAA4C,QAA9BqE,EAAwB,QAAxBC,EAAe,QAAfC,EAAAlF,EAASM,cAAM,IAAA4E,OAAA,EAAAA,EAAEf,eAAO,IAAAc,OAAA,EAAAA,EAAEF,YAAI,IAAAC,OAAA,EAAAA,EAAErB,MACnDjB,KAAK9B,aAA6C,QAA9BuE,EAAwB,QAAxBC,EAAe,QAAfC,EAAArF,EAASM,cAAM,IAAA+E,OAAA,EAAAA,EAAElB,eAAO,IAAAiB,OAAA,EAAAA,EAAEL,YAAI,IAAAI,OAAA,EAAAA,EAAEvB,OACpDlB,KAAK7B,kBAAkDX,KAAX,QAAxBoF,EAAe,QAAfC,EAAAvF,EAASM,cAAM,IAAAiF,OAAA,EAAAA,EAAEpB,eAAO,IAAAmB,OAAA,EAAAA,EAAEE,MAC9C9C,KAAK5B,YAA4C,QAA9B2E,EAAwB,QAAxBC,EAAe,QAAfC,EAAA3F,EAASM,cAAM,IAAAqF,OAAA,EAAAA,EAAExB,eAAO,IAAAuB,OAAA,EAAAA,EAAEF,YAAI,IAAAC,OAAA,EAAAA,EAAEjB,EACnD9B,KAAK3B,YAA4C,QAA9B6E,EAAwB,QAAxBC,EAAe,QAAfC,EAAA9F,EAASM,cAAM,IAAAwF,OAAA,EAAAA,EAAE3B,eAAO,IAAA0B,OAAA,EAAAA,EAAEL,YAAI,IAAAI,OAAA,EAAAA,EAAEhB,EACnDlC,KAAK1B,gBAAgD,QAA9B+E,EAAwB,QAAxBC,EAAe,QAAfC,EAAAjG,EAASM,cAAM,IAAA2F,OAAA,EAAAA,EAAE9B,eAAO,IAAA6B,OAAA,EAAAA,EAAER,YAAI,IAAAO,OAAA,EAAAA,EAAEpC,MACvDjB,KAAKzB,iBAAiD,QAA9BiF,EAAwB,QAAxBC,EAAe,QAAfC,EAAApG,EAASM,cAAM,IAAA8F,OAAA,EAAAA,EAAEjC,eAAO,IAAAgC,OAAA,EAAAA,EAAEX,YAAI,IAAAU,OAAA,EAAAA,EAAEtC,OAGxDlB,KAAKxB,IAA8B,iBAAjBlB,EAASkB,KAAoB,IAAMlB,EAASkB,KAAOlB,EAASkB,IAAM,EAAIlB,EAASkB,IAAM,GACvGwB,KAAKvB,UAA8B,QAAlBkF,EAAArG,EAASmB,iBAAS,IAAAkF,EAAAA,EAAI,EACvC3D,KAAKtB,KAAoB,QAAbkF,EAAAtG,EAASoB,YAAI,IAAAkF,GAAAA,EACzB5D,KAAKrB,WAAgC,QAAnBkF,EAAAvG,EAASqB,kBAAU,IAAAkF,EAAAA,EAAI,EACzC7D,KAAKpB,YAAkC,QAApBkF,EAAAxG,EAASsB,mBAAW,IAAAkF,EAAAA,EAAKxG,EAASM,OAAOuD,MAAM4C,OAASzG,EAASM,OAAOuD,MAAM4C,OAAS,EAAI,EAC9G/D,KAAKnB,aAAoC,QAArBmF,EAAA1G,EAASuB,oBAAY,IAAAmF,EAAAA,EAAI,EAC7ChE,KAAKlB,iBAA4C,QAAzBmF,EAAA3G,EAASwB,wBAAgB,IAAAmF,GAAAA,EACjDjE,KAAKjB,iBAA4C,QAAzBmF,EAAA5G,EAASyB,wBAAgB,IAAAmF,GAAAA,EACjDlE,KAAKhB,SAAwB,QAAbmF,EAAA7G,EAAS8B,YAAI,IAAA+E,GAAAA,EAC7BnE,KAAKf,QAA0B,QAAhBmF,EAAA9G,EAAS2B,eAAO,IAAAmF,GAAAA,EAE3B9G,EAAS+G,IACXrE,KAAKW,iCAAiCrD,EAAS+G,IAG7CrE,KAAKhB,UACPgB,KAAKZ,MAET,CAcQkF,SAAAA,CAAUC,GAChBvE,KAAKpC,OAAO2G,GAAOjD,MAAQ,UAC3BtB,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOI,MACtC,MAAMkF,EAAM,IAAIC,MAChBD,EAAIE,IAAM3E,KAAKpC,OAAO2G,GAAOlD,KAC7BoD,EAAIG,OAAS,KACX5E,KAAKpC,OAAO2G,GAAOjD,MAAQ,SAC3BtB,KAAKpC,OAAO2G,GAAOM,MAAQJ,EAC3BzE,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOK,SAEnCQ,KAAKd,YAEJc,KAAKlB,kBACLkB,KAAKjB,kBACLiB,KAAK8E,oBAGP9E,KAAKnB,eAAiBmB,KAAKrB,WAAaqB,KAAKN,QAAUM,KAAKL,O,EAGhE8E,EAAIM,QAAU,KACZ/E,KAAKpC,OAAO2G,GAAOjD,MAAQ,OAAO,CAEtC,CAcQ0D,YAAAA,CAAaC,GACnBjF,KAAKd,UAAY+F,CACnB,CAaQC,WAAAA,GACNlF,KAAKgF,cAAa,GAClBhF,KAAKmF,UAAUnF,KAAKnB,cACpBmB,KAAKQ,YAAc,IAAOR,KAAKxB,IAC/BwB,KAAKO,KAAOF,KAAKD,MACjBJ,KAAKoF,UAAYpF,KAAKO,KACtBJ,EAAAH,KAAIF,EAAA,KAAQ1C,KAAZ4C,KACF,CAsCQS,KAAAA,GACFT,KAAKvB,UAAY,EACfuB,KAAKtB,KACHsB,KAAKnB,eAAiBmB,KAAKpB,YAC7BoB,KAAKqF,gBAAgBrF,KAAKrB,YAE1BqB,KAAKqF,gBAAgBrF,KAAKnB,aAAe,GAGvCmB,KAAKnB,eAAiBmB,KAAKpB,YAC7BoB,KAAKgF,cAAa,GAElBhF,KAAKqF,gBAAgBrF,KAAKnB,aAAe,GAIzCmB,KAAKtB,KACHsB,KAAKnB,eAAiBmB,KAAKrB,WAC7BqB,KAAKqF,gBAAgBrF,KAAKpB,aAE1BoB,KAAKqF,gBAAgBrF,KAAKnB,aAAe,GAGvCmB,KAAKnB,eAAiBmB,KAAKrB,WAC7BqB,KAAKgF,cAAa,GAElBhF,KAAKqF,gBAAgBrF,KAAKnB,aAAe,GAI/CmB,KAAKmF,UAAUnF,KAAKnB,aACtB,CAcOsG,SAAAA,CAAUG,GACf,GAAsC,WAAlCtF,KAAKpC,OAAO0H,GAAYhE,OAAuBtB,KAAKpC,OAAO0H,GAAYT,MAA3E,CAQA,GAJA7E,KAAKvC,QAAQ8H,UAAU,EAAG,EAAGvF,KAAKzC,OAAO0D,MAAOjB,KAAKzC,OAAO2D,QACxDlB,KAAKf,SAASuG,QAAQC,IAAI,YAAaH,EAAYtF,KAAKpC,OAAO0H,IACnEtF,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOM,QAElCO,KAAK7B,aAAc,CACrB,GAAI6B,KAAKhC,cAAgBgC,KAAKnC,iBAa5B,YAXAmC,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB7E,KAAK5B,YACL4B,KAAK3B,YACL2B,KAAK1B,gBACL0B,KAAKzB,iBACLyB,KAAKlC,WACLkC,KAAKjC,WACLiC,KAAK/B,YACL+B,KAAK9B,cAGF,GAAI8B,KAAKhC,aAad,YAXAgC,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB7E,KAAK5B,YACL4B,KAAK3B,YACL2B,KAAK1B,gBACL0B,KAAKzB,iBACL,EACA,EACAyB,KAAK/B,YACL+B,KAAK9B,cAGE8B,KAAKnC,iBAEdmC,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB7E,KAAK5B,YACL4B,KAAK3B,YACL2B,KAAKrC,YACLqC,KAAKtC,aACLsC,KAAKlC,WACLkC,KAAKjC,WACLiC,KAAK/B,YACL+B,KAAK9B,cAIP8B,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB7E,KAAK5B,YACL4B,KAAK3B,YACL2B,KAAKrC,YACLqC,KAAKtC,aACL,EACA,EACAsC,KAAK/B,YACL+B,KAAK9B,a,CAKX,GAAI8B,KAAKhC,aACP,OAAIgC,KAAKnC,sBAEPmC,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB7E,KAAKlC,WACLkC,KAAKjC,WACLiC,KAAK/B,YACL+B,KAAK9B,mBAKP8B,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB,EACA,EACA7E,KAAK/B,YACL+B,KAAK9B,cAMP8B,KAAKnC,iBAEPmC,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB7E,KAAKlC,WACLkC,KAAKjC,YAMTiC,KAAKvC,QAAQ0H,UACXnF,KAAKpC,OAAO0H,GAAYT,MACxB,EACA,E,MAvGI7E,KAAKf,SAASuG,QAAQC,IAAI,eAAgBH,EAAYtF,KAAKpC,OAAO0H,GAyG1E,CAaOlG,IAAAA,GACLY,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOC,MACtCY,KAAK0F,eAAe,CAACzE,MAAOjB,KAAKrC,YAAauD,OAAQlB,KAAKtC,eAC3DsC,KAAKpC,OAAO+H,SAAQ,CAACC,EAAGrB,KACtBvE,KAAKsE,UAAUC,EAAM,GAEzB,CAaOO,cAAAA,GACL,OAAO9E,KAAKpC,OAAOiI,OAAMpB,GAAqB,WAAdA,EAAInD,OACtC,CAaO5B,KAAAA,GACLM,KAAKnB,aAAemB,KAAKrB,WACzBqB,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOO,OACtCM,KAAKkF,aACP,CAcOvF,IAAAA,GACLK,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOQ,MACtCK,KAAKkF,aACP,CAaOtF,IAAAA,GACLI,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOS,MACtCI,KAAKgF,cAAa,GAClBhF,KAAKqF,gBAAgBrF,KAAKrB,WAC5B,CAaOkB,KAAAA,GACLG,KAAKzC,OAAOiH,cAAcxE,KAAKb,OAAOU,OACtCG,KAAKgF,cAAa,EACpB,CAmCOX,EAAAA,CAAGyB,EAAgCC,GACxC/F,KAAKzC,OAAOsD,iBAAiBiF,EAAWC,EAASjF,KAAKd,MACxD,CAeOgG,GAAAA,CAAIF,EAAgCC,GACzC/F,KAAKzC,OAAO0I,oBAAoBH,EAAWC,EAASjF,KAAKd,MAC3D,CAcOqF,eAAAA,CAAgBC,GACrBtF,KAAKnB,aAAeyG,CACtB,CAaOY,eAAAA,GACL,OAAOlG,KAAKnB,YACd,CAcO6G,cAAAA,CAAeS,GAChBA,EAAMlF,OACRjB,KAAKzC,OAAO0D,MAAQkF,EAAMlF,MAC1BjB,KAAKrC,YAAcwI,EAAMlF,OAEzBjB,KAAKrC,YAAcqC,KAAKzC,OAAO0D,MAE7BkF,EAAMjF,QACRlB,KAAKzC,OAAO2D,OAASiF,EAAMjF,OAC3BlB,KAAKtC,aAAeyI,EAAMjF,QAE1BlB,KAAKtC,aAAesC,KAAKzC,OAAO2D,MAEpC,CAaOkF,cAAAA,GACL,MAAO,CACLnF,MAAOjB,KAAKrC,YACZuD,OAAQlB,KAAKtC,aAEjB,CAcO2I,eAAAA,CAAgB5E,G,oBACrBzB,KAAKnC,sBAAyCL,KAAtBiE,aAAO,EAAPA,EAASC,UACjC1B,KAAKlC,WAA6B,QAAhB0D,EAAAC,EAAQC,gBAAQ,IAAAF,OAAA,EAAAA,EAAEM,EACpC9B,KAAKjC,WAA6B,QAAhBwD,EAAAE,EAAQC,gBAAQ,IAAAH,OAAA,EAAAA,EAAEW,EACpClC,KAAKhC,kBAAiCR,KAAlBiE,aAAO,EAAPA,EAASY,MAC7BrC,KAAK/B,YAA0B,QAAZ4D,EAAAJ,EAAQY,YAAI,IAAAR,OAAA,EAAAA,EAAEZ,MACjCjB,KAAK9B,aAA2B,QAAZ0D,EAAAH,EAAQY,YAAI,IAAAT,OAAA,EAAAA,EAAEV,OAClClB,KAAK7B,kBAAiCX,KAAlBiE,aAAO,EAAPA,EAASqB,MAC7B9C,KAAK5B,YAA0B,QAAZuD,EAAAF,EAAQqB,YAAI,IAAAnB,OAAA,EAAAA,EAAEG,EACjC9B,KAAK3B,YAA0B,QAAZ4D,EAAAR,EAAQqB,YAAI,IAAAb,OAAA,EAAAA,EAAEC,EACjClC,KAAK1B,gBAA8B,QAAZ0D,EAAAP,EAAQqB,YAAI,IAAAd,OAAA,EAAAA,EAAEf,MACrCjB,KAAKzB,iBAA+B,QAAZwD,EAAAN,EAAQqB,YAAI,IAAAf,OAAA,EAAAA,EAAEb,MACxC,CAaOoF,gBAAAA,GACL,MAAO,CACL5E,SAAU,CACRI,EAAG9B,KAAKlC,WACRoE,EAAGlC,KAAKjC,YAEV+E,KAAM,CACJhB,EAAG9B,KAAK5B,YACR8D,EAAGlC,KAAK3B,YACR4C,MAAOjB,KAAK1B,gBACZ4C,OAAQlB,KAAKzB,kBAEf8D,KAAM,CACJpB,MAAOjB,KAAK/B,YACZiD,OAAQlB,KAAK9B,cAGnB,CAcAqI,MAAAA,CAAOC,GACLxG,KAAKxB,IAAuB,iBAAVgI,GAAsB,IAAMA,GAASA,EAAQ,EAAIA,EAAQ,EAC7E,CAaAC,MAAAA,GACE,OAAOzG,KAAKxB,GACd,CAcAkI,YAAAA,CAAaF,GACXxG,KAAKvB,UAAY+H,CACnB,CAaAG,YAAAA,GACE,OAAO3G,KAAKvB,SACd,CAcAmI,OAAAA,CAAQJ,GACNxG,KAAKtB,KAAO8H,CACd,CAaAK,OAAAA,GACE,OAAO7G,KAAKtB,IACd,CAcAoI,aAAAA,CAAcvC,GACRA,EAAQvE,KAAKpC,OAAOmG,OACtB/D,KAAKrB,WAAaqB,KAAKpC,OAAOmG,OAI9B/D,KAAKrB,WADH4F,EAAQ,EACQ,EAGFA,CACpB,CAaAwC,aAAAA,GACE,OAAO/G,KAAKrB,UACd,CAcAqI,cAAAA,CAAezC,GACTA,EAAQvE,KAAKpC,OAAOmG,OACtB/D,KAAKpB,YAAcoB,KAAKpC,OAAOmG,OAI/B/D,KAAKpB,YADH2F,EAAQ,EACS,EAGFA,CACrB,CAaA0C,cAAAA,GACE,OAAOjH,KAAKpB,WACd,CAaAsI,aAAAA,GACElH,KAAKf,SAAU,CACjB,CAaAkI,cAAAA,GACEnH,KAAKf,SAAU,CACjB,CAaAmI,UAAAA,GACE,OAAOpH,KAAKf,OACd,E","sources":["webpack://SequenceCanvas/webpack/bootstrap","webpack://SequenceCanvas/webpack/runtime/define property getters","webpack://SequenceCanvas/webpack/runtime/hasOwnProperty shorthand","webpack://SequenceCanvas/./index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","export type StateImageSequenceCanvas = 'WAIT' | 'LOADING' | 'LOADED' | 'ERROR';\nexport type DirectionSequenceCanvas = -1 | 1;\nexport type EventSequenceCanvas = 'init' | 'load' | 'loaded' | 'render' | 'start' | 'play' | 'stop' | 'pause';\nexport interface ImageOptionsSequenceCanvas {\n  position?: {\n    x: number;\n    y: number;\n  }\n  trim?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }\n  size?: {\n    width: number;\n    height: number;\n  }\n}\nexport interface ReturnImageOptionsSequenceCanvas {\n  position: {\n    x: number;\n    y: number;\n  }\n  trim: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }\n  size: {\n    width: number;\n    height: number;\n  }\n}\nexport interface SettingsSequenceCanvas {\n  canvas: {\n    element: HTMLCanvasElement;\n    width?: number;\n    height?: number;\n  };\n  images: {\n    paths: Array<string>;\n    options?: ImageOptionsSequenceCanvas\n  };\n  init?: boolean;\n  direction?: DirectionSequenceCanvas\n  loop?: boolean;\n  fps?: number;\n  startIndex?: number;\n  finishIndex?: number;\n  currentIndex?: number;\n  startImmediately?: boolean;\n  startAfterLoaded?: boolean;\n  logging?: boolean;\n  on?: any;\n}\nexport interface ImageSequenceCanvas {\n  path: string;\n  state: StateImageSequenceCanvas;\n  image?: HTMLImageElement;\n}\n\n\n/**\n * Creates a new sequence canvas.\n * @name SequenceCanvas\n * @class\n */\n\nexport default class SequenceCanvas {\n  // Canvas\n  public readonly canvas: HTMLCanvasElement = undefined;\n  public readonly context: CanvasRenderingContext2D = undefined;\n  private heightCanvas: number = undefined;\n  private widthCanvas: number = undefined;\n\n  // Images\n  private readonly images: Array<ImageSequenceCanvas> = undefined;\n  private isPositionImages: boolean = undefined;\n  private xPosImages: number = undefined;\n  private yPosImages: number = undefined;\n  private isSizeImages: boolean = undefined;\n  private widthImages: number = undefined;\n  private heightImages: number = undefined;\n  private isTrimImages: boolean = undefined;\n  private xTrimImages: number = undefined;\n  private yTrimImages: number = undefined;\n  private widthTrimImages: number = undefined;\n  private heightTrimImages: number = undefined;\n\n  // Optional\n  private fps: number = undefined;\n  private direction: DirectionSequenceCanvas = undefined;\n  private loop: boolean = undefined;\n  private startIndex: number = undefined;\n  private finishIndex: number = undefined;\n  private currentIndex: number = undefined;\n  private readonly startImmediately: boolean = undefined;\n  private readonly startAfterLoaded: boolean = undefined;\n  private readonly initiate: boolean = false;\n  private logging: boolean = false;\n\n  // Domestic\n  private rendering: boolean = false;\n  private requestId: number;\n  private fpsInterval: number;\n  private now: number;\n  private then: number;\n  private startTime: number;\n  private elapsed: number;\n\n  // Events\n  private events = {\n    init: new CustomEvent('init', {bubbles: true}),\n    load: new CustomEvent('load', {bubbles: true}),\n    loaded: new CustomEvent('loaded', {bubbles: true}),\n    render: new CustomEvent('render', {bubbles: true}),\n    start: new CustomEvent('start', {bubbles: true}),\n    play: new CustomEvent('play', {bubbles: true}),\n    stop: new CustomEvent('stop', {bubbles: true}),\n    pause: new CustomEvent('pause', {bubbles: true}),\n  }\n\n\n\n  /**\n   * Create a point.\n   * @constructor\n   * @param {SettingsSequenceCanvas} settings - Settings for creating a new instance\n   */\n\n  constructor(settings: SettingsSequenceCanvas) {\n    // Canvas\n    this.canvas = settings.canvas.element;\n    this.context = this.canvas.getContext(\"2d\");\n    this.widthCanvas = settings.canvas.width;\n    this.heightCanvas = settings.canvas.height;\n\n    // Images\n    this.images = settings.images.paths.map((path) => {\n      return {path, state: 'WAIT'};\n    });\n    this.isPositionImages = settings.images?.options?.position !== undefined;\n    this.xPosImages = settings.images?.options?.position?.x;\n    this.yPosImages = settings.images?.options?.position?.y;\n    this.isSizeImages = settings.images?.options?.size !== undefined;\n    this.widthImages = settings.images?.options?.size?.width;\n    this.heightImages = settings.images?.options?.size?.height;\n    this.isTrimImages = settings.images?.options?.trim !== undefined;\n    this.xTrimImages = settings.images?.options?.trim?.x;\n    this.yTrimImages = settings.images?.options?.trim?.y;\n    this.widthTrimImages = settings.images?.options?.trim?.width;\n    this.heightTrimImages = settings.images?.options?.trim?.height;\n\n    // Optional\n    this.fps = typeof settings.fps === 'number' && 60 >= settings.fps && settings.fps > 0 ? settings.fps : 60;\n    this.direction = settings.direction ?? 1;\n    this.loop = settings.loop ?? true;\n    this.startIndex = settings.startIndex ?? 0;\n    this.finishIndex = settings.finishIndex ?? (settings.images.paths.length ? settings.images.paths.length - 1 : 0);\n    this.currentIndex = settings.currentIndex ?? 0;\n    this.startImmediately = settings.startImmediately ?? false;\n    this.startAfterLoaded = settings.startAfterLoaded ?? true;\n    this.initiate = settings.init ?? true;\n    this.logging = settings.logging ?? false;\n\n    if (settings.on) {\n      this.addListenersBeforeInitialization(settings.on);\n    }\n\n    if (this.initiate) {\n      this.init();\n    }\n  }\n\n\n\n  /**\n   * This method loads the image by index.\n   *\n   * @method\n   * @private\n   * @name this.#loadImage\n   * @param {number} index Index of element in image array.\n   * @return {void}\n   */\n\n  private loadImage(index: number): void {\n    this.images[index].state = 'LOADING';\n    this.canvas.dispatchEvent(this.events.load);\n    const img = new Image();\n    img.src = this.images[index].path;\n    img.onload = () => {\n      this.images[index].state = 'LOADED';\n      this.images[index].image = img;\n      this.canvas.dispatchEvent(this.events.loaded);\n      if (\n        !this.rendering &&\n        (\n          this.startImmediately ||\n          this.startAfterLoaded &&\n          this.isLoadedFrames()\n        )\n      ) {\n        this.currentIndex === this.startIndex ? this.start() : this.play();\n      }\n    };\n    img.onerror = () => {\n      this.images[index].state = 'ERROR';\n    };\n  }\n\n\n\n  /**\n   * Changing the rendering flag.\n   *\n   * @method\n   * @private\n   * @name this.#setRendering\n   * @param {boolean} isRendering\n   * @return {void}\n   */\n\n  private setRendering(isRendering: boolean): void {\n    this.rendering = isRendering;\n  }\n\n\n\n  /**\n   * The method starts the rendering loop\n   *\n   * @method\n   * @private\n   * @name this.#startRender\n   * @return {void}\n   */\n\n  private startRender(): void {\n    this.setRendering(true);\n    this.drawImage(this.currentIndex);\n    this.fpsInterval = 1000 / this.fps;\n    this.then = Date.now();\n    this.startTime = this.then;\n    this.#render();\n  }\n\n\n\n  /**\n   * The method is loop rendering.\n   *\n   * @method\n   * @private\n   * @name this.#render\n   * @return {void}\n   */\n\n  #render = (): void => {\n    if (!this.rendering) {\n      if (this.requestId) cancelAnimationFrame(this.requestId);\n      return;\n    }\n    this.requestId = requestAnimationFrame(this.#render);\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n    if (this.elapsed > this.fpsInterval) {\n      this.then = this.now - (this.elapsed % this.fpsInterval);\n      this.logic();\n    }\n  }\n\n\n\n  /**\n   * Logic for changing images\n   *\n   * @method\n   * @private\n   * @name logic\n   * @return {void}\n   */\n\n  private logic(): void {\n    if (this.direction > 0) {\n      if (this.loop) {\n        if (this.currentIndex === this.finishIndex) {\n          this.setCurrentImage(this.startIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      } else {\n        if (this.currentIndex === this.finishIndex) {\n          this.setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      }\n    } else {\n      if (this.loop) {\n        if (this.currentIndex === this.startIndex) {\n          this.setCurrentImage(this.finishIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      } else {\n        if (this.currentIndex === this.startIndex) {\n          this.setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      }\n    }\n    this.drawImage(this.currentIndex);\n  }\n\n\n\n  /**\n   * Drawing an image by index\n   *\n   * @method\n   * @public\n   * @name drawImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  public drawImage(indexImage: number): void {\n    if (this.images[indexImage].state !== 'LOADED' || !this.images[indexImage].image) {\n      if (this.logging) console.log('not rendered', indexImage, this.images[indexImage]);\n      return;\n    }\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    if (this.logging) console.log('rendered:', indexImage, this.images[indexImage]);\n    this.canvas.dispatchEvent(this.events.render);\n\n    if (this.isTrimImages) {\n      if (this.isSizeImages && this.isPositionImages) {\n        // trim + size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isSizeImages) {\n        // trim + size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isPositionImages) {\n        // trim + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n      } else {\n        // trim\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n      }\n    }\n\n    if (this.isSizeImages) {\n      if (this.isPositionImages) {\n        // size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else {\n        // size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      }\n    }\n\n    if (this.isPositionImages) {\n      // pos\n      this.context.drawImage(\n        this.images[indexImage].image,\n        this.xPosImages,\n        this.yPosImages,\n      );\n      return;\n    }\n\n    // default\n    this.context.drawImage(\n      this.images[indexImage].image,\n      0,\n      0,\n    );\n  }\n\n\n\n  /**\n   * Initializing canvas and image array (possibly downloading them)\n   *\n   * @method\n   * @public\n   * @name init\n   * @return {void}\n   */\n\n  public init(): void {\n    this.canvas.dispatchEvent(this.events.init);\n    this.setSizesCanvas({width: this.widthCanvas, height: this.heightCanvas});\n    this.images.forEach((_, index) => {\n      this.loadImage(index);\n    })\n  }\n\n\n\n  /**\n   * This method checks if all images are loaded\n   *\n   * @method\n   * @public\n   * @name isLoadedFrames\n   * @return {boolean}\n   */\n\n  public isLoadedFrames(): boolean {\n    return this.images.every(img => img.state === \"LOADED\")\n  }\n\n\n\n  /**\n   * Start rendering from the starting image\n   *\n   * @method\n   * @public\n   * @name start\n   * @return {void}\n   */\n\n  public start(): void {\n    this.currentIndex = this.startIndex;\n    this.canvas.dispatchEvent(this.events.start);\n    this.startRender();\n  }\n\n\n\n  /**\n   * Start rendering from the current image\n   *\n   * @method\n   * @public\n   * @name play\n   * @return {void}\n   */\n\n  // Запуск рендеринга\n  public play(): void {\n    this.canvas.dispatchEvent(this.events.play);\n    this.startRender();\n  }\n\n\n\n  /**\n   * Pausing rendering and displaying the initial image\n   *\n   * @method\n   * @public\n   * @name stop\n   * @return {void}\n   */\n\n  public stop(): void {\n    this.canvas.dispatchEvent(this.events.stop);\n    this.setRendering(false);\n    this.setCurrentImage(this.startIndex);\n  }\n\n\n\n  /**\n   * Pause rendering\n   *\n   * @method\n   * @public\n   * @name pause\n   * @return {void}\n   */\n\n  public pause() {\n    this.canvas.dispatchEvent(this.events.pause);\n    this.setRendering(false);\n  }\n\n\n\n  /**\n   * Add listeners before initialization\n   *\n   * @method\n   * @private\n   * @name addListenersBeforeInitialization\n   * @param {any} listeners\n   * @return {void}\n   */\n\n  private addListenersBeforeInitialization = (listeners: any): void => {\n    if (listeners) {\n      for (let key in listeners) {\n        this.canvas.addEventListener(key, listeners[key].bind(this));\n      }\n    }\n  }\n\n\n\n  /**\n   * Attaches a listener to an event\n   *\n   * @method\n   * @public\n   * @name on\n   * @param {EventSequenceCanvas} eventName\n   * @param {(event: CustomEvent) => void} callback\n   * @return {void}\n   */\n\n  public on(eventName: EventSequenceCanvas, callback: (event: CustomEvent) => void): void {\n    this.canvas.addEventListener(eventName, callback.bind(this));\n  }\n\n\n\n  /**\n   * Removing an event listener\n   *\n   * @method\n   * @public\n   * @name off\n   * @param {EventSequenceCanvas} eventName\n   * @param {(event: CustomEvent) => void} callback\n   * @return {void}\n   */\n\n  public off(eventName: EventSequenceCanvas, callback: (event: CustomEvent) => void): void {\n    this.canvas.removeEventListener(eventName, callback.bind(this));\n  }\n\n\n\n  /**\n   * Set current image\n   *\n   * @method\n   * @public\n   * @name setCurrentImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  public setCurrentImage(indexImage: number): void {\n    this.currentIndex = indexImage;\n  }\n\n\n\n  /**\n   * Get current image\n   *\n   * @method\n   * @public\n   * @name getCurrentImage\n   * @return {number}\n   */\n\n  public getCurrentImage(): number {\n    return this.currentIndex;\n  }\n\n\n\n  /**\n   * The method sets the size of the canvas\n   *\n   * @method\n   * @public\n   * @name setSizesCanvas\n   * @param {width: number, height: number} sizes Dimensions\n   * @return {void}\n   */\n\n  public setSizesCanvas(sizes: {width?: number; height?: number}) {\n    if (sizes.width) {\n      this.canvas.width = sizes.width;\n      this.widthCanvas = sizes.width;\n    } else {\n      this.widthCanvas = this.canvas.width;\n    }\n    if (sizes.height) {\n      this.canvas.height = sizes.height;\n      this.heightCanvas = sizes.height;\n    } else {\n      this.heightCanvas = this.canvas.height;\n    }\n  }\n\n\n\n  /**\n   * The method gets the size of the canvas\n   *\n   * @method\n   * @public\n   * @name getSizesCanvas\n   * @return {{width: number, height: number}}\n   */\n\n  public getSizesCanvas() {\n    return {\n      width: this.widthCanvas,\n      height: this.heightCanvas,\n    }\n  }\n\n\n\n  /**\n   * Set image options\n   *\n   * @method\n   * @public\n   * @name setImageOptions\n   * @param {ImageOptionsSequenceCanvas} options\n   * @return {void}\n   */\n\n  public setImageOptions(options: ImageOptionsSequenceCanvas) {\n    this.isPositionImages = options?.position !== undefined;\n    this.xPosImages = options.position?.x;\n    this.yPosImages = options.position?.y;\n    this.isSizeImages = options?.size !== undefined;\n    this.widthImages = options.size?.width;\n    this.heightImages = options.size?.height;\n    this.isTrimImages = options?.trim !== undefined;\n    this.xTrimImages = options.trim?.x;\n    this.yTrimImages = options.trim?.y;\n    this.widthTrimImages = options.trim?.width;\n    this.heightTrimImages = options.trim?.height;\n  }\n\n\n\n  /**\n   * Get image settings\n   *\n   * @method\n   * @public\n   * @name getImageSettings\n   * @return {ReturnImageOptionsSequenceCanvas}\n   */\n\n  public getImageSettings(): ReturnImageOptionsSequenceCanvas {\n    return {\n      position: {\n        x: this.xPosImages,\n        y: this.yPosImages\n      },\n      trim: {\n        x: this.xTrimImages,\n        y: this.yTrimImages,\n        width: this.widthTrimImages,\n        height: this.heightTrimImages\n      },\n      size: {\n        width: this.widthImages,\n        height: this.heightImages\n      }\n    }\n  }\n\n\n\n  /**\n   * Set fps\n   *\n   * @method\n   * @public\n   * @name setFps\n   * @param {number} value\n   * @return {void}\n   */\n\n  setFps(value: number): void {\n    this.fps = typeof value === 'number' && 60 >= value && value > 0 ? value : 60;\n  }\n\n\n\n  /**\n   * Get fps\n   *\n   * @method\n   * @public\n   * @name getFps\n   * @return {number}\n   */\n\n  getFps(): number {\n    return this.fps;\n  }\n\n\n\n  /**\n   * Set direction\n   *\n   * @method\n   * @public\n   * @name setDirection\n   * @param {DirectionSequenceCanvas} value\n   * @return {void}\n   */\n\n  setDirection(value: DirectionSequenceCanvas): void {\n    this.direction = value;\n  }\n\n\n\n  /**\n   * Get direction\n   *\n   * @method\n   * @public\n   * @name getDirection\n   * @return {DirectionSequenceCanvas}\n   */\n\n  getDirection(): DirectionSequenceCanvas {\n    return this.direction\n  }\n\n\n\n  /**\n   * Set loop\n   *\n   * @method\n   * @public\n   * @name setLoop\n   * @param {boolean} value\n   * @return {void}\n   */\n\n  setLoop(value: boolean): void {\n    this.loop = value;\n  }\n\n\n\n  /**\n   * Get loop\n   *\n   * @method\n   * @public\n   * @name getLoop\n   * @return {boolean}\n   */\n\n  getLoop(): boolean {\n    return this.loop\n  }\n\n\n\n  /**\n   * Set start index\n   *\n   * @method\n   * @public\n   * @name setStartIndex\n   * @param {number} index\n   * @return {void}\n   */\n\n  setStartIndex(index: number): void {\n    if (index > this.images.length) {\n      this.startIndex = this.images.length;\n      return;\n    }\n    if (index < 0) {\n      this.startIndex = 0;\n      return;\n    }\n    this.startIndex = index;\n  }\n\n\n\n  /**\n   * Get start index\n   *\n   * @method\n   * @public\n   * @name getStartIndex\n   * @return {number}\n   */\n\n  getStartIndex(): number {\n    return this.startIndex;\n  }\n\n\n\n  /**\n   * Set finish index\n   *\n   * @method\n   * @public\n   * @name setFinishIndex\n   * @param {number} index\n   * @return {void}\n   */\n\n  setFinishIndex(index: number): void {\n    if (index > this.images.length) {\n      this.finishIndex = this.images.length;\n      return;\n    }\n    if (index < 0) {\n      this.finishIndex = 0;\n      return;\n    }\n    this.finishIndex = index;\n  }\n\n\n\n  /**\n   * Get finish index\n   *\n   * @method\n   * @public\n   * @name getFinishIndex\n   * @return {number}\n   */\n\n  getFinishIndex(): number {\n    return this.finishIndex;\n  }\n\n\n\n  /**\n   * Enable logging\n   *\n   * @method\n   * @public\n   * @name enableLogging\n   * @return {void}\n   */\n\n  enableLogging(): void {\n    this.logging = true;\n  }\n\n\n\n  /**\n   * Disable logging\n   *\n   * @method\n   * @public\n   * @name disableLogging\n   * @return {void}\n   */\n\n  disableLogging(): void {\n    this.logging = false;\n  }\n\n\n\n  /**\n   * Get logging\n   *\n   * @method\n   * @public\n   * @name getLogging\n   * @return {void}\n   */\n\n  getLogging(): boolean {\n    return this.logging;\n  }\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","constructor","settings","canvas","undefined","context","heightCanvas","widthCanvas","images","isPositionImages","xPosImages","yPosImages","isSizeImages","widthImages","heightImages","isTrimImages","xTrimImages","yTrimImages","widthTrimImages","heightTrimImages","fps","direction","loop","startIndex","finishIndex","currentIndex","startImmediately","startAfterLoaded","initiate","logging","rendering","events","init","CustomEvent","bubbles","load","loaded","render","start","play","stop","pause","_SequenceCanvas_render","set","this","requestId","requestAnimationFrame","__classPrivateFieldGet","now","Date","elapsed","then","fpsInterval","logic","cancelAnimationFrame","addListenersBeforeInitialization","listeners","addEventListener","bind","element","getContext","width","height","paths","map","path","state","_b","_a","options","position","_e","_d","_c","x","_h","_g","_f","y","_k","_j","size","_o","_m","_l","_r","_q","_p","_t","_s","trim","_w","_v","_u","_z","_y","_x","_2","_1","_0","_5","_4","_3","_6","_7","_8","_9","length","_10","_11","_12","_13","_14","on","loadImage","index","dispatchEvent","img","Image","src","onload","image","isLoadedFrames","onerror","setRendering","isRendering","startRender","drawImage","startTime","setCurrentImage","indexImage","clearRect","console","log","setSizesCanvas","forEach","_","every","eventName","callback","off","removeEventListener","getCurrentImage","sizes","getSizesCanvas","setImageOptions","getImageSettings","setFps","value","getFps","setDirection","getDirection","setLoop","getLoop","setStartIndex","getStartIndex","setFinishIndex","getFinishIndex","enableLogging","disableLogging","getLogging"],"sourceRoot":""}