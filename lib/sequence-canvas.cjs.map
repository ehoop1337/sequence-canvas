{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["export type StateImageSequenceCanvas = 'WAIT' | 'LOADING' | 'LOADED' | 'ERROR';\nexport type DirectionSequenceCanvas = -1 | 1;\nexport type EventSequenceCanvas = 'init' | 'load' | 'loaded' | 'render' | 'start' | 'play' | 'stop' | 'pause';\nexport interface ImageOptionsSequenceCanvas {\n  position?: {\n    x: number;\n    y: number;\n  }\n  trim?: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }\n  size?: {\n    width: number;\n    height: number;\n  }\n}\nexport interface ReturnImageOptionsSequenceCanvas {\n  position: {\n    x: number;\n    y: number;\n  }\n  trim: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  }\n  size: {\n    width: number;\n    height: number;\n  }\n}\nexport interface SettingsSequenceCanvas {\n  canvas: {\n    element: HTMLCanvasElement;\n    width?: number;\n    height?: number;\n  };\n  images: {\n    paths: Array<string>;\n    options?: ImageOptionsSequenceCanvas\n  };\n  init?: boolean;\n  direction?: DirectionSequenceCanvas\n  loop?: boolean;\n  fps?: number;\n  startIndex?: number;\n  finishIndex?: number;\n  currentIndex?: number;\n  startImmediately?: boolean;\n  startAfterLoaded?: boolean;\n  logging?: boolean;\n  on?: any;\n}\nexport interface ImageSequenceCanvas {\n  path: string;\n  state: StateImageSequenceCanvas;\n  image?: HTMLImageElement;\n}\n\n\n\n/**\n * Creates a new sequence canvas.\n * @name SequenceCanvas\n * @class\n */\n\nexport default class SequenceCanvas {\n  // Canvas\n  public readonly canvas: HTMLCanvasElement = undefined;\n  public readonly context: CanvasRenderingContext2D = undefined;\n  private heightCanvas: number = undefined;\n  private widthCanvas: number = undefined;\n\n  // Images\n  private readonly images: Array<ImageSequenceCanvas> = undefined;\n  private isPositionImages: boolean = undefined;\n  private xPosImages: number = undefined;\n  private yPosImages: number = undefined;\n  private isSizeImages: boolean = undefined;\n  private widthImages: number = undefined;\n  private heightImages: number = undefined;\n  private isTrimImages: boolean = undefined;\n  private xTrimImages: number = undefined;\n  private yTrimImages: number = undefined;\n  private widthTrimImages: number = undefined;\n  private heightTrimImages: number = undefined;\n\n  // Optional\n  private fps: number = undefined;\n  private direction: DirectionSequenceCanvas = undefined;\n  private loop: boolean = undefined;\n  private startIndex: number = undefined;\n  private finishIndex: number = undefined;\n  private currentIndex: number = undefined;\n  private readonly startImmediately: boolean = undefined;\n  private readonly startAfterLoaded: boolean = undefined;\n  private readonly initiate: boolean = false;\n  private logging: boolean = false;\n\n  // Domestic\n  private rendering: boolean = false;\n  private requestId: number;\n  private fpsInterval: number;\n  private now: number;\n  private then: number;\n  private startTime: number;\n  private elapsed: number;\n\n  // Events\n  private events = {\n    init: new CustomEvent('init', {bubbles: true}),\n    load: new CustomEvent('load', {bubbles: true}),\n    loaded: new CustomEvent('loaded', {bubbles: true}),\n    render: new CustomEvent('render', {bubbles: true}),\n    start: new CustomEvent('start', {bubbles: true}),\n    play: new CustomEvent('play', {bubbles: true}),\n    stop: new CustomEvent('stop', {bubbles: true}),\n    pause: new CustomEvent('pause', {bubbles: true}),\n  }\n\n\n\n  /**\n   * Create a point.\n   * @constructor\n   * @param {SettingsSequenceCanvas} settings - Settings for creating a new instance\n   */\n\n  constructor(settings: SettingsSequenceCanvas) {\n    // Canvas\n    this.canvas = settings.canvas.element;\n    this.context = this.canvas.getContext(\"2d\");\n    this.widthCanvas = settings.canvas.width;\n    this.heightCanvas = settings.canvas.height;\n\n    // Images\n    this.images = settings.images.paths.map((path) => {\n      return {path, state: 'WAIT'};\n    });\n    this.isPositionImages = settings.images?.options?.position !== undefined;\n    this.xPosImages = settings.images?.options?.position?.x;\n    this.yPosImages = settings.images?.options?.position?.y;\n    this.isSizeImages = settings.images?.options?.size !== undefined;\n    this.widthImages = settings.images?.options?.size?.width;\n    this.heightImages = settings.images?.options?.size?.height;\n    this.isTrimImages = settings.images?.options?.trim !== undefined;\n    this.xTrimImages = settings.images?.options?.trim?.x;\n    this.yTrimImages = settings.images?.options?.trim?.y;\n    this.widthTrimImages = settings.images?.options?.trim?.width;\n    this.heightTrimImages = settings.images?.options?.trim?.height;\n\n    // Optional\n    this.fps = typeof settings.fps === 'number' && 60 >= settings.fps && settings.fps > 0 ? settings.fps : 60;\n    this.direction = settings.direction ?? 1;\n    this.loop = settings.loop ?? true;\n    this.startIndex = settings.startIndex ?? 0;\n    this.finishIndex = settings.finishIndex ?? (settings.images.paths.length ? settings.images.paths.length - 1 : 0);\n    this.currentIndex = settings.currentIndex ?? 0;\n    this.startImmediately = settings.startImmediately ?? false;\n    this.startAfterLoaded = settings.startAfterLoaded ?? true;\n    this.initiate = settings.init ?? true;\n    this.logging = settings.logging ?? false;\n\n    if (settings.on) {\n      this.addListenersBeforeInitialization(settings.on);\n    }\n\n    if (this.initiate) {\n      this.init();\n    }\n  }\n\n\n\n  /**\n   * This method loads the image by index.\n   *\n   * @method\n   * @private\n   * @name this.#loadImage\n   * @param {number} index Index of element in image array.\n   * @return {void}\n   */\n\n  private loadImage(index: number): void {\n    this.images[index].state = 'LOADING';\n    this.canvas.dispatchEvent(this.events.load);\n    const img = new Image();\n    img.src = this.images[index].path;\n    img.onload = () => {\n      this.images[index].state = 'LOADED';\n      this.images[index].image = img;\n      this.canvas.dispatchEvent(this.events.loaded);\n      if (\n        !this.rendering &&\n        (\n          this.startImmediately ||\n          this.startAfterLoaded &&\n          this.isLoadedFrames()\n        )\n      ) {\n        this.currentIndex === this.startIndex ? this.start() : this.play();\n      }\n    };\n    img.onerror = () => {\n      this.images[index].state = 'ERROR';\n    };\n  }\n\n\n\n  /**\n   * Changing the rendering flag.\n   *\n   * @method\n   * @private\n   * @name this.#setRendering\n   * @param {boolean} isRendering\n   * @return {void}\n   */\n\n  private setRendering(isRendering: boolean): void {\n    this.rendering = isRendering;\n  }\n\n\n\n  /**\n   * The method starts the rendering loop\n   *\n   * @method\n   * @private\n   * @name this.#startRender\n   * @return {void}\n   */\n\n  private startRender(): void {\n    this.setRendering(true);\n    this.drawImage(this.currentIndex);\n    this.fpsInterval = 1000 / this.fps;\n    this.then = Date.now();\n    this.startTime = this.then;\n    this.#render();\n  }\n\n\n\n  /**\n   * The method is loop rendering.\n   *\n   * @method\n   * @private\n   * @name this.#render\n   * @return {void}\n   */\n\n  #render = (): void => {\n    if (!this.rendering) {\n      if (this.requestId) cancelAnimationFrame(this.requestId);\n      return;\n    }\n    this.requestId = requestAnimationFrame(this.#render);\n    this.now = Date.now();\n    this.elapsed = this.now - this.then;\n    if (this.elapsed > this.fpsInterval) {\n      this.then = this.now - (this.elapsed % this.fpsInterval);\n      this.logic();\n    }\n  }\n\n\n\n  /**\n   * Logic for changing images\n   *\n   * @method\n   * @private\n   * @name logic\n   * @return {void}\n   */\n\n  private logic(): void {\n    if (this.direction > 0) {\n      if (this.loop) {\n        if (this.currentIndex === this.finishIndex) {\n          this.setCurrentImage(this.startIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      } else {\n        if (this.currentIndex === this.finishIndex) {\n          this.setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      }\n    } else {\n      if (this.loop) {\n        if (this.currentIndex === this.startIndex) {\n          this.setCurrentImage(this.finishIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      } else {\n        if (this.currentIndex === this.startIndex) {\n          this.setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      }\n    }\n    this.drawImage(this.currentIndex);\n  }\n\n\n\n  /**\n   * Drawing an image by index\n   *\n   * @method\n   * @public\n   * @name drawImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  public drawImage(indexImage: number): void {\n    if (this.images[indexImage].state !== 'LOADED' || !this.images[indexImage].image) {\n      if (this.logging) console.log('not rendered', indexImage, this.images[indexImage]);\n      return;\n    }\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    if (this.logging) console.log('rendered:', indexImage, this.images[indexImage]);\n    this.canvas.dispatchEvent(this.events.render);\n\n    if (this.isTrimImages) {\n      if (this.isSizeImages && this.isPositionImages) {\n        // trim + size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isSizeImages) {\n        // trim + size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isPositionImages) {\n        // trim + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n      } else {\n        // trim\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n      }\n    }\n\n    if (this.isSizeImages) {\n      if (this.isPositionImages) {\n        // size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else {\n        // size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      }\n    }\n\n    if (this.isPositionImages) {\n      // pos\n      this.context.drawImage(\n        this.images[indexImage].image,\n        this.xPosImages,\n        this.yPosImages,\n      );\n      return;\n    }\n\n    // default\n    this.context.drawImage(\n      this.images[indexImage].image,\n      0,\n      0,\n    );\n  }\n\n\n\n  /**\n   * Initializing canvas and image array (possibly downloading them)\n   *\n   * @method\n   * @public\n   * @name init\n   * @return {void}\n   */\n\n  public init(): void {\n    this.canvas.dispatchEvent(this.events.init);\n    this.setSizesCanvas({width: this.widthCanvas, height: this.heightCanvas});\n    this.images.forEach((_, index) => {\n      this.loadImage(index);\n    })\n  }\n\n\n\n  /**\n   * This method checks if all images are loaded\n   *\n   * @method\n   * @public\n   * @name isLoadedFrames\n   * @return {boolean}\n   */\n\n  public isLoadedFrames(): boolean {\n    return this.images.every(img => img.state === \"LOADED\")\n  }\n\n\n\n  /**\n   * Start rendering from the starting image\n   *\n   * @method\n   * @public\n   * @name start\n   * @return {void}\n   */\n\n  public start(): void {\n    this.currentIndex = this.startIndex;\n    this.canvas.dispatchEvent(this.events.start);\n    this.startRender();\n  }\n\n\n\n  /**\n   * Start rendering from the current image\n   *\n   * @method\n   * @public\n   * @name play\n   * @return {void}\n   */\n\n  // \u0417\u0430\u043F\u0443\u0441\u043A \u0440\u0435\u043D\u0434\u0435\u0440\u0438\u043D\u0433\u0430\n  public play(): void {\n    this.canvas.dispatchEvent(this.events.play);\n    this.startRender();\n  }\n\n\n\n  /**\n   * Pausing rendering and displaying the initial image\n   *\n   * @method\n   * @public\n   * @name stop\n   * @return {void}\n   */\n\n  public stop(): void {\n    this.canvas.dispatchEvent(this.events.stop);\n    this.setRendering(false);\n    this.setCurrentImage(this.startIndex);\n  }\n\n\n\n  /**\n   * Pause rendering\n   *\n   * @method\n   * @public\n   * @name pause\n   * @return {void}\n   */\n\n  public pause() {\n    this.canvas.dispatchEvent(this.events.pause);\n    this.setRendering(false);\n  }\n\n\n\n  /**\n   * Add listeners before initialization\n   *\n   * @method\n   * @private\n   * @name addListenersBeforeInitialization\n   * @param {any} listeners\n   * @return {void}\n   */\n\n  private addListenersBeforeInitialization = (listeners: any): void => {\n    if (listeners) {\n      for (let key in listeners) {\n        this.canvas.addEventListener(key, listeners[key].bind(this));\n      }\n    }\n  }\n\n\n\n  /**\n   * Attaches a listener to an event\n   *\n   * @method\n   * @public\n   * @name on\n   * @param {EventSequenceCanvas} eventName\n   * @param {(event: CustomEvent) => void} callback\n   * @return {void}\n   */\n\n  public on(eventName: EventSequenceCanvas, callback: (event: CustomEvent) => void): void {\n    this.canvas.addEventListener(eventName, callback.bind(this));\n  }\n\n\n\n  /**\n   * Removing an event listener\n   *\n   * @method\n   * @public\n   * @name off\n   * @param {EventSequenceCanvas} eventName\n   * @param {(event: CustomEvent) => void} callback\n   * @return {void}\n   */\n\n  public off(eventName: EventSequenceCanvas, callback: (event: CustomEvent) => void): void {\n    this.canvas.removeEventListener(eventName, callback.bind(this));\n  }\n\n\n\n  /**\n   * Set current image\n   *\n   * @method\n   * @public\n   * @name setCurrentImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  public setCurrentImage(indexImage: number): void {\n    this.currentIndex = indexImage;\n  }\n\n\n\n  /**\n   * Get current image\n   *\n   * @method\n   * @public\n   * @name getCurrentImage\n   * @return {number}\n   */\n\n  public getCurrentImage(): number {\n    return this.currentIndex;\n  }\n\n\n\n  /**\n   * The method sets the size of the canvas\n   *\n   * @method\n   * @public\n   * @name setSizesCanvas\n   * @param {width: number, height: number} sizes Dimensions\n   * @return {void}\n   */\n\n  public setSizesCanvas(sizes: {width?: number; height?: number}) {\n    if (sizes.width) {\n      this.canvas.width = sizes.width;\n      this.widthCanvas = sizes.width;\n    } else {\n      this.widthCanvas = this.canvas.width;\n    }\n    if (sizes.height) {\n      this.canvas.height = sizes.height;\n      this.heightCanvas = sizes.height;\n    } else {\n      this.heightCanvas = this.canvas.height;\n    }\n  }\n\n\n\n  /**\n   * The method gets the size of the canvas\n   *\n   * @method\n   * @public\n   * @name getSizesCanvas\n   * @return {{width: number, height: number}}\n   */\n\n  public getSizesCanvas() {\n    return {\n      width: this.widthCanvas,\n      height: this.heightCanvas,\n    }\n  }\n\n\n\n  /**\n   * Set image options\n   *\n   * @method\n   * @public\n   * @name setImageOptions\n   * @param {ImageOptionsSequenceCanvas} options\n   * @return {void}\n   */\n\n  public setImageOptions(options: ImageOptionsSequenceCanvas) {\n    this.isPositionImages = options?.position !== undefined;\n    this.xPosImages = options.position?.x;\n    this.yPosImages = options.position?.y;\n    this.isSizeImages = options?.size !== undefined;\n    this.widthImages = options.size?.width;\n    this.heightImages = options.size?.height;\n    this.isTrimImages = options?.trim !== undefined;\n    this.xTrimImages = options.trim?.x;\n    this.yTrimImages = options.trim?.y;\n    this.widthTrimImages = options.trim?.width;\n    this.heightTrimImages = options.trim?.height;\n  }\n\n\n\n  /**\n   * Get image settings\n   *\n   * @method\n   * @public\n   * @name getImageSettings\n   * @return {ReturnImageOptionsSequenceCanvas}\n   */\n\n  public getImageSettings(): ReturnImageOptionsSequenceCanvas {\n    return {\n      position: {\n        x: this.xPosImages,\n        y: this.yPosImages\n      },\n      trim: {\n        x: this.xTrimImages,\n        y: this.yTrimImages,\n        width: this.widthTrimImages,\n        height: this.heightTrimImages\n      },\n      size: {\n        width: this.widthImages,\n        height: this.heightImages\n      }\n    }\n  }\n\n\n\n  /**\n   * Set fps\n   *\n   * @method\n   * @public\n   * @name setFps\n   * @param {number} value\n   * @return {void}\n   */\n\n  setFps(value: number): void {\n    this.fps = typeof value === 'number' && 60 >= value && value > 0 ? value : 60;\n  }\n\n\n\n  /**\n   * Get fps\n   *\n   * @method\n   * @public\n   * @name getFps\n   * @return {number}\n   */\n\n  getFps(): number {\n    return this.fps;\n  }\n\n\n\n  /**\n   * Set direction\n   *\n   * @method\n   * @public\n   * @name setDirection\n   * @param {DirectionSequenceCanvas} value\n   * @return {void}\n   */\n\n  setDirection(value: DirectionSequenceCanvas): void {\n    this.direction = value;\n  }\n\n\n\n  /**\n   * Get direction\n   *\n   * @method\n   * @public\n   * @name getDirection\n   * @return {DirectionSequenceCanvas}\n   */\n\n  getDirection(): DirectionSequenceCanvas {\n    return this.direction\n  }\n\n\n\n  /**\n   * Set loop\n   *\n   * @method\n   * @public\n   * @name setLoop\n   * @param {boolean} value\n   * @return {void}\n   */\n\n  setLoop(value: boolean): void {\n    this.loop = value;\n  }\n\n\n\n  /**\n   * Get loop\n   *\n   * @method\n   * @public\n   * @name getLoop\n   * @return {boolean}\n   */\n\n  getLoop(): boolean {\n    return this.loop\n  }\n\n\n\n  /**\n   * Set start index\n   *\n   * @method\n   * @public\n   * @name setStartIndex\n   * @param {number} index\n   * @return {void}\n   */\n\n  setStartIndex(index: number): void {\n    if (index > this.images.length) {\n      this.startIndex = this.images.length;\n      return;\n    }\n    if (index < 0) {\n      this.startIndex = 0;\n      return;\n    }\n    this.startIndex = index;\n  }\n\n\n\n  /**\n   * Get start index\n   *\n   * @method\n   * @public\n   * @name getStartIndex\n   * @return {number}\n   */\n\n  getStartIndex(): number {\n    return this.startIndex;\n  }\n\n\n\n  /**\n   * Set finish index\n   *\n   * @method\n   * @public\n   * @name setFinishIndex\n   * @param {number} index\n   * @return {void}\n   */\n\n  setFinishIndex(index: number): void {\n    if (index > this.images.length) {\n      this.finishIndex = this.images.length;\n      return;\n    }\n    if (index < 0) {\n      this.finishIndex = 0;\n      return;\n    }\n    this.finishIndex = index;\n  }\n\n\n\n  /**\n   * Get finish index\n   *\n   * @method\n   * @public\n   * @name getFinishIndex\n   * @return {number}\n   */\n\n  getFinishIndex(): number {\n    return this.finishIndex;\n  }\n\n\n\n  /**\n   * Enable logging\n   *\n   * @method\n   * @public\n   * @name enableLogging\n   * @return {void}\n   */\n\n  enableLogging(): void {\n    this.logging = true;\n  }\n\n\n\n  /**\n   * Disable logging\n   *\n   * @method\n   * @public\n   * @name disableLogging\n   * @return {void}\n   */\n\n  disableLogging(): void {\n    this.logging = false;\n  }\n\n\n\n  /**\n   * Get logging\n   *\n   * @method\n   * @public\n   * @name getLogging\n   * @return {void}\n   */\n\n  getLogging(): boolean {\n    return this.logging;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
