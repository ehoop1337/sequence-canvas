{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["type StateImageSequenceCanvas = 'WAIT' | 'LOADING' | 'LOADED' | 'ERROR';\ntype DirectionSequenceCanvas = -1 | 1;\ntype EventSequenceCanvas = 'init' | 'load' | 'loaded' | 'render' | 'start' | 'play' | 'stop' | 'pause';\n\ninterface SettingsSequenceCanvas {\n  canvas: {\n    element: HTMLCanvasElement;\n    width?: number;\n    height?: number;\n  };\n  images: {\n    paths: Array<string>;\n    options?: {\n      position?: {\n        x: number;\n        y: number;\n      }\n      trim?: {\n        x: number;\n        y: number;\n        width: number;\n        height: number;\n      }\n      size?: {\n        width: number;\n        height: number;\n      }\n    }\n  };\n  init?: boolean;\n  direction?: DirectionSequenceCanvas\n  loop?: boolean;\n  fps?: number;\n  startIndex?: number;\n  finishIndex?: number;\n  currentIndex?: number;\n  startImmediately?: boolean;\n  startAfterLoaded?: boolean;\n  logging?: boolean;\n}\ninterface ImageSequenceCanvas {\n  path: string;\n  state: StateImageSequenceCanvas;\n  image?: HTMLImageElement;\n}\n\n/**\n * Creates a new sequence canvas.\n * @name SequenceCanvas\n * @class\n */\n\nexport default class SequenceCanvas {\n  // Canvas\n  canvas: HTMLCanvasElement = undefined;\n  context: CanvasRenderingContext2D = undefined;\n  heightCanvas: number = undefined;\n  widthCanvas: number = undefined;\n\n  // Images\n  images: Array<ImageSequenceCanvas> = undefined;\n  isPositionImages: boolean = undefined;\n  xPosImages: number = undefined;\n  yPosImages: number = undefined;\n  isSizeImages: boolean = undefined;\n  widthImages: number = undefined;\n  heightImages: number = undefined;\n  isTrimImages: boolean = undefined;\n  xTrimImages: number = undefined;\n  yTrimImages: number = undefined;\n  widthTrimImages: number = undefined;\n  heightTrimImages: number = undefined;\n\n  // Optional\n  fps: number = undefined;\n  direction: DirectionSequenceCanvas = undefined;\n  loop: boolean = undefined;\n  startIndex: number = undefined;\n  finishIndex: number = undefined;\n  currentIndex: number = undefined;\n  startImmediately: boolean = undefined;\n  startAfterLoaded: boolean = undefined;\n  initiate: boolean = false;\n  logging: boolean = false;\n\n  // Domestic\n  #rendering: boolean = false;\n  #requestId: number;\n  #fpsInterval: number;\n  #now: number;\n  #then: number;\n  #startTime: number;\n  #elapsed: number;\n\n  // Events\n  #events = {\n    init: new Event('init', {bubbles: true}),\n    load: new Event('load', {bubbles: true}),\n    loaded: new Event('loaded', {bubbles: true}),\n    render: new Event('render', {bubbles: true}),\n    start: new Event('start', {bubbles: true}),\n    play: new Event('play', {bubbles: true}),\n    stop: new Event('stop', {bubbles: true}),\n    pause: new Event('pause', {bubbles: true}),\n  }\n\n  /**\n   * Create a point.\n   * @constructor\n   * @param {SettingsSequenceCanvas} settings - Settings for creating a new instance\n   */\n\n  constructor(settings: SettingsSequenceCanvas) {\n    // Canvas\n    this.canvas = settings.canvas.element;\n    this.context = this.canvas.getContext(\"2d\");\n    this.widthCanvas = settings.canvas.width;\n    this.heightCanvas = settings.canvas.height;\n\n    // Images\n    this.images = settings.images.paths.map((path) => {\n      return {path, state: 'WAIT'};\n    });\n    this.isPositionImages = settings.images?.options?.position !== undefined;\n    this.xPosImages = settings.images?.options?.position?.x;\n    this.yPosImages = settings.images?.options?.position?.y;\n    this.isSizeImages = settings.images?.options?.size !== undefined;\n    this.widthImages = settings.images?.options?.size?.width;\n    this.heightImages = settings.images?.options?.size?.height;\n    this.isTrimImages = settings.images?.options?.trim !== undefined;\n    this.xTrimImages = settings.images?.options?.trim?.x;\n    this.yTrimImages = settings.images?.options?.trim?.y;\n    this.widthTrimImages = settings.images?.options?.trim?.width;\n    this.heightTrimImages = settings.images?.options?.trim?.height;\n\n    // Optional\n    this.fps = typeof settings.fps === 'number' && 60 >= settings.fps && settings.fps > 0 ? settings.fps : 60;\n    this.direction = settings.direction ?? 1;\n    this.loop = settings.loop ?? true;\n    this.startIndex = settings.startIndex ?? 0;\n    this.finishIndex = settings.finishIndex ?? (settings.images.paths.length ? settings.images.paths.length - 1 : 0);\n    this.currentIndex = settings.currentIndex ?? 0;\n    this.startImmediately = settings.startImmediately ?? false;\n    this.startAfterLoaded = settings.startAfterLoaded ?? true;\n    this.initiate = settings.init ?? true;\n    this.logging = settings.logging ?? false;\n\n    if (this.initiate) {\n      this.init();\n    }\n  }\n\n  /**\n   * This method loads the image by index.\n   *\n   * @method\n   * @private\n   * @name this.#loadImage\n   * @param {number} index Index of element in image array.\n   * @return {void}\n   */\n\n  #loadImage(index: number): void {\n    this.images[index].state = 'LOADING';\n    this.canvas.dispatchEvent(this.#events.load);\n    const img = new Image();\n    img.src = this.images[index].path;\n    img.onload = () => {\n      this.images[index].state = 'LOADED';\n      this.images[index].image = img;\n      this.canvas.dispatchEvent(this.#events.loaded);\n      if (\n        !this.#rendering &&\n        (\n          this.startImmediately ||\n          this.startAfterLoaded &&\n          this.isLoadedFrames()\n        )\n      ) {\n        this.currentIndex === this.startIndex ? this.start() : this.play();\n      }\n    };\n    img.onerror = () => {\n      this.images[index].state = 'ERROR';\n    };\n  }\n\n  /**\n   * Changing the rendering flag.\n   *\n   * @method\n   * @private\n   * @name this.#setRendering\n   * @param {boolean} isRendering\n   * @return {void}\n   */\n\n  #setRendering(isRendering: boolean): void {\n    this.#rendering = isRendering;\n  }\n\n  /**\n   * The method starts the rendering loop\n   *\n   * @method\n   * @private\n   * @name this.#startRender\n   * @return {void}\n   */\n\n  #startRender(): void {\n    this.#setRendering(true);\n    this.drawImage(this.currentIndex);\n    this.#fpsInterval = 1000 / this.fps;\n    this.#then = Date.now();\n    this.#startTime = this.#then;\n    this.#render();\n  }\n\n  /**\n   * The method is loop rendering.\n   *\n   * @method\n   * @private\n   * @name this.#render\n   * @return {void}\n   */\n\n  #render = (): void => {\n    if (!this.#rendering) {\n      if (this.#requestId) cancelAnimationFrame(this.#requestId);\n      return;\n    }\n    this.#requestId = requestAnimationFrame(this.#render);\n    this.#now = Date.now();\n    this.#elapsed = this.#now - this.#then;\n    if (this.#elapsed > this.#fpsInterval) {\n      this.#then = this.#now - (this.#elapsed % this.#fpsInterval);\n      this.#logic();\n    }\n  }\n\n  /**\n   * Logic for changing images\n   *\n   * @method\n   * @private\n   * @name this.#logic\n   * @return {void}\n   */\n\n  #logic() {\n    if (this.direction > 0) {\n      if (this.loop) {\n        if (this.currentIndex === this.finishIndex) {\n          this.setCurrentImage(this.startIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      } else {\n        if (this.currentIndex === this.finishIndex) {\n          this.#setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex + 1)\n        }\n      }\n    } else {\n      if (this.loop) {\n        if (this.currentIndex === this.startIndex) {\n          this.setCurrentImage(this.finishIndex)\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      } else {\n        if (this.currentIndex === this.startIndex) {\n          this.#setRendering(false);\n        } else {\n          this.setCurrentImage(this.currentIndex - 1)\n        }\n      }\n    }\n    this.drawImage(this.currentIndex);\n  }\n\n  /**\n   * Drawing an image by index\n   *\n   * @method\n   * @public\n   * @name drawImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  drawImage(indexImage: number): void {\n    if (this.images[indexImage].state !== 'LOADED' || !this.images[indexImage].image) {\n      if (this.logging) console.log('not rendered', indexImage, this.images[indexImage]);\n      return;\n    }\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    if (this.logging) console.log('rendered:', indexImage, this.images[indexImage]);\n    this.canvas.dispatchEvent(this.#events.render);\n\n    if (this.isTrimImages) {\n      if (this.isSizeImages && this.isPositionImages) {\n        // trim + size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isSizeImages) {\n        // trim + size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthTrimImages,\n          this.heightTrimImages,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else if (this.isPositionImages) {\n        // trim + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n      } else {\n        // trim\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xTrimImages,\n          this.yTrimImages,\n          this.widthCanvas,\n          this.heightCanvas,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n      }\n    }\n\n    if (this.isSizeImages) {\n      if (this.isPositionImages) {\n        // size + pos\n        this.context.drawImage(\n          this.images[indexImage].image,\n          this.xPosImages,\n          this.yPosImages,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      } else {\n        // size\n        this.context.drawImage(\n          this.images[indexImage].image,\n          0,\n          0,\n          this.widthImages,\n          this.heightImages,\n        );\n        return;\n      }\n    }\n\n    if (this.isPositionImages) {\n      // pos\n      this.context.drawImage(\n        this.images[indexImage].image,\n        this.xPosImages,\n        this.yPosImages,\n      );\n      return;\n    }\n\n    // default\n    this.context.drawImage(\n      this.images[indexImage].image,\n      0,\n      0,\n    );\n  }\n\n  /**\n   * Initializing canvas and image array (possibly downloading them)\n   *\n   * @method\n   * @public\n   * @name init\n   * @return {void}\n   */\n\n  init(): void {\n    this.canvas.dispatchEvent(this.#events.init);\n    this.setSizesCanvas({width: this.widthCanvas, height: this.heightCanvas});\n    this.images.forEach((_, index) => {\n      this.#loadImage(index);\n    })\n  }\n\n  /**\n   * This method checks if all images are loaded\n   *\n   * @method\n   * @public\n   * @name isLoadedFrames\n   * @return {boolean}\n   */\n\n  isLoadedFrames(): boolean {\n    return this.images.every(img => img.state === \"LOADED\")\n  }\n\n  /**\n   * The method checks whether at least one image had a problem loading\n   *\n   * @method\n   * @public\n   * @name isErrorLoadFrames\n   * @return {boolean}\n   */\n\n  isErrorLoadFrames(): boolean {\n    return this.images.some(img => img.state === \"ERROR\")\n  }\n\n  /**\n   * Start rendering from the starting image\n   *\n   * @method\n   * @public\n   * @name start\n   * @return {void}\n   */\n\n  start(): void {\n    this.currentIndex = this.startIndex;\n    this.canvas.dispatchEvent(this.#events.start);\n    this.#startRender();\n  }\n\n  /**\n   * Start rendering from the current image\n   *\n   * @method\n   * @public\n   * @name play\n   * @return {void}\n   */\n\n  // \u0417\u0430\u043F\u0443\u0441\u043A \u0440\u0435\u043D\u0434\u0435\u0440\u0438\u043D\u0433\u0430\n  play(): void {\n    this.canvas.dispatchEvent(this.#events.play);\n    this.#startRender();\n  }\n\n  /**\n   * Pausing rendering and displaying the initial image\n   *\n   * @method\n   * @public\n   * @name stop\n   * @return {void}\n   */\n\n  stop(): void {\n    this.canvas.dispatchEvent(this.#events.stop);\n    this.#setRendering(false);\n    this.setCurrentImage(this.startIndex);\n  }\n\n  /**\n   * Pause rendering\n   *\n   * @method\n   * @public\n   * @name pause\n   * @return {void}\n   */\n\n  pause() {\n    this.canvas.dispatchEvent(this.#events.pause);\n    this.#setRendering(false);\n  }\n\n  /**\n   * Set current image\n   *\n   * @method\n   * @public\n   * @name setCurrentImage\n   * @param {number} indexImage Index of the image in the array\n   * @return {void}\n   */\n\n  setCurrentImage(indexImage: number): void {\n    this.currentIndex = indexImage;\n  }\n\n  /**\n   * The method sets the size of the canvas\n   *\n   * @method\n   * @public\n   * @name setSizesCanvas\n   * @param {width: number, height: number} sizes Dimensions\n   * @return {void}\n   */\n\n  setSizesCanvas(sizes: {width?: number; height?: number}) {\n    if (sizes.width) {\n      this.canvas.width = sizes.width;\n      this.widthCanvas = sizes.width;\n    } else {\n      this.widthCanvas = this.canvas.width;\n    }\n    if (sizes.height) {\n      this.canvas.height = sizes.height;\n      this.heightCanvas = sizes.height;\n    } else {\n      this.heightCanvas = this.canvas.height;\n    }\n  }\n\n  on(eventName: EventSequenceCanvas, callback: (event: CustomEvent) => void) {\n    this.canvas.addEventListener(eventName, callback.bind(this));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
