{"version":3,"file":"sequence-canvas.js","mappings":"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","sources":["webpack://SequenceCanvas/webpack/startup","webpack://SequenceCanvas/./index.ts"],"sourcesContent":["// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[771](0, __webpack_exports__);\n","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SequenceCanvas_render;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Creates a new sequence canvas.\n * @name SequenceCanvas\n * @class\n */\nclass SequenceCanvas {\n    /**\n     * Create a point.\n     * @constructor\n     * @param {SettingsSequenceCanvas} settings - Settings for creating a new instance\n     */\n    constructor(settings) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18;\n        this.initiate = false;\n        this.logging = false;\n        // Domestic\n        this.rendering = false;\n        this.requestId = 0;\n        this.fpsInterval = 0;\n        this.now = 0;\n        this.then = 0;\n        this.startTime = 0;\n        this.elapsed = 0;\n        // Events\n        this.events = {\n            init: new CustomEvent('init', { bubbles: true }),\n            load: new CustomEvent('load', { bubbles: true }),\n            loaded: new CustomEvent('loaded', { bubbles: true }),\n            render: new CustomEvent('render', { bubbles: true }),\n            start: new CustomEvent('start', { bubbles: true }),\n            play: new CustomEvent('play', { bubbles: true }),\n            stop: new CustomEvent('stop', { bubbles: true }),\n            pause: new CustomEvent('pause', { bubbles: true }),\n        };\n        /**\n         * The method is loop rendering.\n         *\n         * @method\n         * @private\n         * @name this.#render\n         * @return {void}\n         */\n        _SequenceCanvas_render.set(this, () => {\n            if (!this.rendering) {\n                if (this.requestId)\n                    cancelAnimationFrame(this.requestId);\n                return;\n            }\n            this.requestId = requestAnimationFrame(__classPrivateFieldGet(this, _SequenceCanvas_render, \"f\"));\n            this.now = Date.now();\n            this.elapsed = this.now - this.then;\n            if (this.elapsed > this.fpsInterval) {\n                this.then = this.now - (this.elapsed % this.fpsInterval);\n                this.logic();\n            }\n        }\n        /**\n         * Logic for changing images\n         *\n         * @method\n         * @private\n         * @name logic\n         * @return {void}\n         */\n        );\n        /**\n         * Add listeners before initialization\n         *\n         * @method\n         * @private\n         * @name addListenersBeforeInitialization\n         * @param {any} listeners\n         * @return {void}\n         */\n        this.addListenersBeforeInitialization = (listeners) => {\n            if (listeners) {\n                for (let key in listeners) {\n                    this.canvas.addEventListener(key, listeners[key].bind(this));\n                }\n            }\n        };\n        // Canvas\n        this.canvas = settings.canvas.element;\n        this.context = this.canvas.getContext(\"2d\");\n        this.widthCanvas = (_b = (_a = settings.canvas) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : this.canvas.width;\n        this.heightCanvas = (_d = (_c = settings.canvas) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : this.canvas.height;\n        // Images\n        this.images = settings.images.paths.map((path) => {\n            return { path, state: 'WAIT' };\n        });\n        this.isPositionImages = ((_f = (_e = settings.images) === null || _e === void 0 ? void 0 : _e.options) === null || _f === void 0 ? void 0 : _f.position) !== undefined;\n        this.xPosImages = (_j = (_h = (_g = settings.images) === null || _g === void 0 ? void 0 : _g.options) === null || _h === void 0 ? void 0 : _h.position) === null || _j === void 0 ? void 0 : _j.x;\n        this.yPosImages = (_m = (_l = (_k = settings.images) === null || _k === void 0 ? void 0 : _k.options) === null || _l === void 0 ? void 0 : _l.position) === null || _m === void 0 ? void 0 : _m.y;\n        this.isSizeImages = ((_p = (_o = settings.images) === null || _o === void 0 ? void 0 : _o.options) === null || _p === void 0 ? void 0 : _p.size) !== undefined;\n        this.widthImages = (_s = (_r = (_q = settings.images) === null || _q === void 0 ? void 0 : _q.options) === null || _r === void 0 ? void 0 : _r.size) === null || _s === void 0 ? void 0 : _s.width;\n        this.heightImages = (_v = (_u = (_t = settings.images) === null || _t === void 0 ? void 0 : _t.options) === null || _u === void 0 ? void 0 : _u.size) === null || _v === void 0 ? void 0 : _v.height;\n        this.isTrimImages = ((_x = (_w = settings.images) === null || _w === void 0 ? void 0 : _w.options) === null || _x === void 0 ? void 0 : _x.trim) !== undefined;\n        this.xTrimImages = (_0 = (_z = (_y = settings.images) === null || _y === void 0 ? void 0 : _y.options) === null || _z === void 0 ? void 0 : _z.trim) === null || _0 === void 0 ? void 0 : _0.x;\n        this.yTrimImages = (_3 = (_2 = (_1 = settings.images) === null || _1 === void 0 ? void 0 : _1.options) === null || _2 === void 0 ? void 0 : _2.trim) === null || _3 === void 0 ? void 0 : _3.y;\n        this.widthTrimImages = (_6 = (_5 = (_4 = settings.images) === null || _4 === void 0 ? void 0 : _4.options) === null || _5 === void 0 ? void 0 : _5.trim) === null || _6 === void 0 ? void 0 : _6.width;\n        this.heightTrimImages = (_9 = (_8 = (_7 = settings.images) === null || _7 === void 0 ? void 0 : _7.options) === null || _8 === void 0 ? void 0 : _8.trim) === null || _9 === void 0 ? void 0 : _9.height;\n        // Optional\n        this.fps = typeof settings.fps === 'number' && 60 >= settings.fps && settings.fps > 0 ? settings.fps : 60;\n        this.direction = (_10 = settings.direction) !== null && _10 !== void 0 ? _10 : 1;\n        this.loop = (_11 = settings.loop) !== null && _11 !== void 0 ? _11 : true;\n        this.startIndex = (_12 = settings.startIndex) !== null && _12 !== void 0 ? _12 : 0;\n        this.finishIndex = (_13 = settings.finishIndex) !== null && _13 !== void 0 ? _13 : (settings.images.paths.length ? settings.images.paths.length - 1 : 0);\n        this.currentIndex = (_14 = settings.currentIndex) !== null && _14 !== void 0 ? _14 : 0;\n        this.startImmediately = (_15 = settings.startImmediately) !== null && _15 !== void 0 ? _15 : false;\n        this.startAfterLoaded = (_16 = settings.startAfterLoaded) !== null && _16 !== void 0 ? _16 : true;\n        this.initiate = (_17 = settings.init) !== null && _17 !== void 0 ? _17 : true;\n        this.logging = (_18 = settings.logging) !== null && _18 !== void 0 ? _18 : false;\n        if (settings.on) {\n            this.addListenersBeforeInitialization(settings.on);\n        }\n        if (this.initiate) {\n            this.init();\n        }\n    }\n    /**\n     * This method loads the image by index.\n     *\n     * @method\n     * @private\n     * @name this.#loadImage\n     * @param {number} index Index of element in image array.\n     * @return {void}\n     */\n    loadImage(index) {\n        this.images[index].state = 'LOADING';\n        this.canvas.dispatchEvent(this.events.load);\n        const img = new Image();\n        img.src = this.images[index].path;\n        img.onload = () => {\n            this.images[index].state = 'LOADED';\n            this.images[index].image = img;\n            this.canvas.dispatchEvent(this.events.loaded);\n            if (!this.rendering &&\n                (this.startImmediately ||\n                    this.startAfterLoaded &&\n                        this.isLoadedFrames())) {\n                this.currentIndex === this.startIndex ? this.start() : this.play();\n            }\n        };\n        img.onerror = () => {\n            this.images[index].state = 'ERROR';\n        };\n    }\n    /**\n     * Changing the rendering flag.\n     *\n     * @method\n     * @private\n     * @name this.#setRendering\n     * @param {boolean} isRendering\n     * @return {void}\n     */\n    setRendering(isRendering) {\n        this.rendering = isRendering;\n    }\n    /**\n     * The method starts the rendering loop\n     *\n     * @method\n     * @private\n     * @name this.#startRender\n     * @return {void}\n     */\n    startRender() {\n        this.setRendering(true);\n        this.drawImage(this.currentIndex);\n        this.fpsInterval = 1000 / this.fps;\n        this.then = Date.now();\n        this.startTime = this.then;\n        __classPrivateFieldGet(this, _SequenceCanvas_render, \"f\").call(this);\n    }\n    /**\n     * Logic for changing images\n     *\n     * @method\n     * @private\n     * @name logic\n     * @return {void}\n     */\n    logic() {\n        if (this.direction > 0) {\n            if (this.loop) {\n                if (this.currentIndex === this.finishIndex) {\n                    this.setCurrentImage(this.startIndex);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex + 1);\n                }\n            }\n            else {\n                if (this.currentIndex === this.finishIndex) {\n                    this.setRendering(false);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex + 1);\n                }\n            }\n        }\n        else {\n            if (this.loop) {\n                if (this.currentIndex === this.startIndex) {\n                    this.setCurrentImage(this.finishIndex);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex - 1);\n                }\n            }\n            else {\n                if (this.currentIndex === this.startIndex) {\n                    this.setRendering(false);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex - 1);\n                }\n            }\n        }\n        this.drawImage(this.currentIndex);\n    }\n    /**\n     * Drawing an image by index\n     *\n     * @method\n     * @public\n     * @name drawImage\n     * @param {number} indexImage Index of the image in the array\n     * @return {void}\n     */\n    drawImage(indexImage) {\n        if (this.images[indexImage].state !== 'LOADED' || !this.images[indexImage].image) {\n            if (this.logging)\n                console.log('not rendered', indexImage, this.images[indexImage]);\n            return;\n        }\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.logging)\n            console.log('rendered:', indexImage, this.images[indexImage]);\n        this.canvas.dispatchEvent(this.events.render);\n        if (this.isTrimImages) {\n            if (this.isSizeImages && this.isPositionImages) {\n                // trim + size + pos\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthTrimImages, this.heightTrimImages, this.xPosImages, this.yPosImages, this.widthImages, this.heightImages);\n                return;\n            }\n            else if (this.isSizeImages) {\n                // trim + size\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthTrimImages, this.heightTrimImages, 0, 0, this.widthImages, this.heightImages);\n                return;\n            }\n            else if (this.isPositionImages) {\n                // trim + pos\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthCanvas, this.heightCanvas, this.xPosImages, this.yPosImages, this.widthImages, this.heightImages);\n            }\n            else {\n                // trim\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthCanvas, this.heightCanvas, 0, 0, this.widthImages, this.heightImages);\n            }\n        }\n        if (this.isSizeImages) {\n            if (this.isPositionImages) {\n                // size + pos\n                this.context.drawImage(this.images[indexImage].image, this.xPosImages, this.yPosImages, this.widthImages, this.heightImages);\n                return;\n            }\n            else {\n                // size\n                this.context.drawImage(this.images[indexImage].image, 0, 0, this.widthImages, this.heightImages);\n                return;\n            }\n        }\n        if (this.isPositionImages) {\n            // pos\n            this.context.drawImage(this.images[indexImage].image, this.xPosImages, this.yPosImages);\n            return;\n        }\n        // default\n        this.context.drawImage(this.images[indexImage].image, 0, 0);\n    }\n    /**\n     * Initializing canvas and image array (possibly downloading them)\n     *\n     * @method\n     * @public\n     * @name init\n     * @return {void}\n     */\n    init() {\n        this.canvas.dispatchEvent(this.events.init);\n        this.setSizesCanvas({ width: this.widthCanvas, height: this.heightCanvas });\n        this.images.forEach((_, index) => {\n            this.loadImage(index);\n        });\n    }\n    /**\n     * This method checks if all images are loaded\n     *\n     * @method\n     * @public\n     * @name isLoadedFrames\n     * @return {boolean}\n     */\n    isLoadedFrames() {\n        return this.images.every(img => img.state === \"LOADED\");\n    }\n    /**\n     * Start rendering from the starting image\n     *\n     * @method\n     * @public\n     * @name start\n     * @return {void}\n     */\n    start() {\n        this.currentIndex = this.startIndex;\n        this.canvas.dispatchEvent(this.events.start);\n        this.startRender();\n    }\n    /**\n     * Start rendering from the current image\n     *\n     * @method\n     * @public\n     * @name play\n     * @return {void}\n     */\n    // Запуск рендеринга\n    play() {\n        this.canvas.dispatchEvent(this.events.play);\n        this.startRender();\n    }\n    /**\n     * Pausing rendering and displaying the initial image\n     *\n     * @method\n     * @public\n     * @name stop\n     * @return {void}\n     */\n    stop() {\n        this.canvas.dispatchEvent(this.events.stop);\n        this.setRendering(false);\n        this.setCurrentImage(this.startIndex);\n        this.drawImage(this.startIndex);\n    }\n    /**\n     * Pause rendering\n     *\n     * @method\n     * @public\n     * @name pause\n     * @return {void}\n     */\n    pause() {\n        this.canvas.dispatchEvent(this.events.pause);\n        this.setRendering(false);\n    }\n    /**\n     * Attaches a listener to an event\n     *\n     * @method\n     * @public\n     * @name on\n     * @param {EventSequenceCanvas} eventName\n     * @param {(event: CustomEvent) => void} callback\n     * @return {void}\n     */\n    on(eventName, callback) {\n        this.canvas.addEventListener(eventName, callback.bind(this));\n    }\n    /**\n     * Removing an event listener\n     *\n     * @method\n     * @public\n     * @name off\n     * @param {EventSequenceCanvas} eventName\n     * @param {(event: CustomEvent) => void} callback\n     * @return {void}\n     */\n    off(eventName, callback) {\n        this.canvas.removeEventListener(eventName, callback.bind(this));\n    }\n    /**\n     * Set current image\n     *\n     * @method\n     * @public\n     * @name setCurrentImage\n     * @param {number} indexImage Index of the image in the array\n     * @return {void}\n     */\n    setCurrentImage(indexImage) {\n        this.currentIndex = indexImage;\n    }\n    /**\n     * Get current image\n     *\n     * @method\n     * @public\n     * @name getCurrentImage\n     * @return {number}\n     */\n    getCurrentImage() {\n        return this.currentIndex;\n    }\n    /**\n     * The method sets the size of the canvas\n     *\n     * @method\n     * @public\n     * @name setSizesCanvas\n     * @param {width: number, height: number} sizes Dimensions\n     * @return {void}\n     */\n    setSizesCanvas(sizes) {\n        if (sizes.width) {\n            this.canvas.width = sizes.width;\n            this.widthCanvas = sizes.width;\n        }\n        else {\n            this.widthCanvas = this.canvas.width;\n        }\n        if (sizes.height) {\n            this.canvas.height = sizes.height;\n            this.heightCanvas = sizes.height;\n        }\n        else {\n            this.heightCanvas = this.canvas.height;\n        }\n    }\n    /**\n     * The method gets the size of the canvas\n     *\n     * @method\n     * @public\n     * @name getSizesCanvas\n     * @return {{width: number, height: number}}\n     */\n    getSizesCanvas() {\n        return {\n            width: this.widthCanvas,\n            height: this.heightCanvas,\n        };\n    }\n    /**\n     * Set image options\n     *\n     * @method\n     * @public\n     * @name setImageOptions\n     * @param {ImageOptionsSequenceCanvas} options\n     * @return {void}\n     */\n    setImageOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.isPositionImages = (options === null || options === void 0 ? void 0 : options.position) !== undefined;\n        this.xPosImages = (_a = options.position) === null || _a === void 0 ? void 0 : _a.x;\n        this.yPosImages = (_b = options.position) === null || _b === void 0 ? void 0 : _b.y;\n        this.isSizeImages = (options === null || options === void 0 ? void 0 : options.size) !== undefined;\n        this.widthImages = (_c = options.size) === null || _c === void 0 ? void 0 : _c.width;\n        this.heightImages = (_d = options.size) === null || _d === void 0 ? void 0 : _d.height;\n        this.isTrimImages = (options === null || options === void 0 ? void 0 : options.trim) !== undefined;\n        this.xTrimImages = (_e = options.trim) === null || _e === void 0 ? void 0 : _e.x;\n        this.yTrimImages = (_f = options.trim) === null || _f === void 0 ? void 0 : _f.y;\n        this.widthTrimImages = (_g = options.trim) === null || _g === void 0 ? void 0 : _g.width;\n        this.heightTrimImages = (_h = options.trim) === null || _h === void 0 ? void 0 : _h.height;\n    }\n    /**\n     * Get image settings\n     *\n     * @method\n     * @public\n     * @name getImageSettings\n     * @return {ReturnImageOptionsSequenceCanvas}\n     */\n    getImageSettings() {\n        return {\n            position: {\n                x: this.xPosImages,\n                y: this.yPosImages\n            },\n            trim: {\n                x: this.xTrimImages,\n                y: this.yTrimImages,\n                width: this.widthTrimImages,\n                height: this.heightTrimImages\n            },\n            size: {\n                width: this.widthImages,\n                height: this.heightImages\n            }\n        };\n    }\n    /**\n     * Set fps\n     *\n     * @method\n     * @public\n     * @name setFps\n     * @param {number} value\n     * @return {void}\n     */\n    setFps(value) {\n        this.fps = 60 >= value && value > 0 ? value : 60;\n    }\n    /**\n     * Get fps\n     *\n     * @method\n     * @public\n     * @name getFps\n     * @return {number}\n     */\n    getFps() {\n        return this.fps;\n    }\n    /**\n     * Set direction\n     *\n     * @method\n     * @public\n     * @name setDirection\n     * @param {DirectionSequenceCanvas} value\n     * @return {void}\n     */\n    setDirection(value) {\n        this.direction = value;\n    }\n    /**\n     * Get direction\n     *\n     * @method\n     * @public\n     * @name getDirection\n     * @return {DirectionSequenceCanvas}\n     */\n    getDirection() {\n        return this.direction;\n    }\n    /**\n     * Set loop\n     *\n     * @method\n     * @public\n     * @name setLoop\n     * @param {boolean} value\n     * @return {void}\n     */\n    setLoop(value) {\n        this.loop = value;\n    }\n    /**\n     * Get loop\n     *\n     * @method\n     * @public\n     * @name getLoop\n     * @return {boolean}\n     */\n    getLoop() {\n        return this.loop;\n    }\n    /**\n     * Set start index\n     *\n     * @method\n     * @public\n     * @name setStartIndex\n     * @param {number} index\n     * @return {void}\n     */\n    setStartIndex(index) {\n        if (index > this.images.length) {\n            this.startIndex = this.images.length;\n            return;\n        }\n        if (index < 0) {\n            this.startIndex = 0;\n            return;\n        }\n        this.startIndex = index;\n    }\n    /**\n     * Get start index\n     *\n     * @method\n     * @public\n     * @name getStartIndex\n     * @return {number}\n     */\n    getStartIndex() {\n        return this.startIndex;\n    }\n    /**\n     * Set finish index\n     *\n     * @method\n     * @public\n     * @name setFinishIndex\n     * @param {number} index\n     * @return {void}\n     */\n    setFinishIndex(index) {\n        if (index > this.images.length) {\n            this.finishIndex = this.images.length;\n            return;\n        }\n        if (index < 0) {\n            this.finishIndex = 0;\n            return;\n        }\n        this.finishIndex = index;\n    }\n    /**\n     * Get finish index\n     *\n     * @method\n     * @public\n     * @name getFinishIndex\n     * @return {number}\n     */\n    getFinishIndex() {\n        return this.finishIndex;\n    }\n    /**\n     * Enable logging\n     *\n     * @method\n     * @public\n     * @name enableLogging\n     * @return {void}\n     */\n    enableLogging() {\n        this.logging = true;\n    }\n    /**\n     * Disable logging\n     *\n     * @method\n     * @public\n     * @name disableLogging\n     * @return {void}\n     */\n    disableLogging() {\n        this.logging = false;\n    }\n    /**\n     * Get logging\n     *\n     * @method\n     * @public\n     * @name getLogging\n     * @return {void}\n     */\n    getLogging() {\n        return this.logging;\n    }\n}\n_SequenceCanvas_render = new WeakMap();\nexports.default = SequenceCanvas;\n"],"names":["__webpack_exports__","_SequenceCanvas_render","__classPrivateFieldGet","this","receiver","state","kind","f","TypeError","has","call","value","get","Object","defineProperty","exports","WeakMap","constructor","settings","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","_15","_16","_17","_18","initiate","logging","rendering","requestId","fpsInterval","now","then","startTime","elapsed","events","init","CustomEvent","bubbles","load","loaded","render","start","play","stop","pause","set","requestAnimationFrame","Date","logic","cancelAnimationFrame","addListenersBeforeInitialization","listeners","key","canvas","addEventListener","bind","element","context","getContext","widthCanvas","width","heightCanvas","height","images","paths","map","path","isPositionImages","undefined","options","position","xPosImages","x","yPosImages","y","isSizeImages","size","widthImages","heightImages","isTrimImages","trim","xTrimImages","yTrimImages","widthTrimImages","heightTrimImages","fps","direction","loop","startIndex","finishIndex","length","currentIndex","startImmediately","startAfterLoaded","on","loadImage","index","dispatchEvent","img","Image","src","onload","image","isLoadedFrames","onerror","setRendering","isRendering","startRender","drawImage","setCurrentImage","indexImage","clearRect","console","log","setSizesCanvas","forEach","_","every","eventName","callback","off","removeEventListener","getCurrentImage","sizes","getSizesCanvas","setImageOptions","getImageSettings","setFps","getFps","setDirection","getDirection","setLoop","getLoop","setStartIndex","getStartIndex","setFinishIndex","getFinishIndex","enableLogging","disableLogging","getLogging"],"sourceRoot":""}