{"version":3,"file":"sequence-canvas.js","mappings":"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","sources":["webpack://SequenceCanvas/webpack/startup","webpack://SequenceCanvas/./index.ts"],"sourcesContent":["// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[771](0, __webpack_exports__);\n","\"use strict\";\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _SequenceCanvas_render;\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Creates a new sequence canvas.\n * @name SequenceCanvas\n * @class\n */\nclass SequenceCanvas {\n    /**\n     * Create a point.\n     * @constructor\n     * @param {SettingsSequenceCanvas} settings - Settings for creating a new instance\n     */\n    constructor(settings) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14;\n        this.initiate = false;\n        this.logging = false;\n        // Domestic\n        this.rendering = false;\n        this.requestId = 0;\n        this.fpsInterval = 0;\n        this.now = 0;\n        this.then = 0;\n        this.startTime = 0;\n        this.elapsed = 0;\n        // Events\n        this.events = {\n            init: new CustomEvent('init', { bubbles: true }),\n            load: new CustomEvent('load', { bubbles: true }),\n            loaded: new CustomEvent('loaded', { bubbles: true }),\n            render: new CustomEvent('render', { bubbles: true }),\n            start: new CustomEvent('start', { bubbles: true }),\n            play: new CustomEvent('play', { bubbles: true }),\n            stop: new CustomEvent('stop', { bubbles: true }),\n            pause: new CustomEvent('pause', { bubbles: true }),\n        };\n        /**\n         * The method is loop rendering.\n         *\n         * @method\n         * @private\n         * @name this.#render\n         * @return {void}\n         */\n        _SequenceCanvas_render.set(this, () => {\n            if (!this.rendering) {\n                if (this.requestId)\n                    cancelAnimationFrame(this.requestId);\n                return;\n            }\n            this.requestId = requestAnimationFrame(__classPrivateFieldGet(this, _SequenceCanvas_render, \"f\"));\n            this.now = Date.now();\n            this.elapsed = this.now - this.then;\n            if (this.elapsed > this.fpsInterval) {\n                this.then = this.now - (this.elapsed % this.fpsInterval);\n                this.logic();\n            }\n        }\n        /**\n         * Logic for changing images\n         *\n         * @method\n         * @private\n         * @name logic\n         * @return {void}\n         */\n        );\n        /**\n         * Add listeners before initialization\n         *\n         * @method\n         * @private\n         * @name addListenersBeforeInitialization\n         * @param {any} listeners\n         * @return {void}\n         */\n        this.addListenersBeforeInitialization = (listeners) => {\n            if (listeners) {\n                for (let key in listeners) {\n                    this.canvas.addEventListener(key, listeners[key].bind(this));\n                }\n            }\n        };\n        // Canvas\n        this.canvas = settings.canvas.element;\n        this.context = this.canvas.getContext(\"2d\");\n        this.widthCanvas = settings.canvas.width || 0;\n        this.heightCanvas = settings.canvas.height || 0;\n        // Images\n        this.images = settings.images.paths.map((path) => {\n            return { path, state: 'WAIT' };\n        });\n        this.isPositionImages = ((_b = (_a = settings.images) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.position) !== undefined;\n        this.xPosImages = (_e = (_d = (_c = settings.images) === null || _c === void 0 ? void 0 : _c.options) === null || _d === void 0 ? void 0 : _d.position) === null || _e === void 0 ? void 0 : _e.x;\n        this.yPosImages = (_h = (_g = (_f = settings.images) === null || _f === void 0 ? void 0 : _f.options) === null || _g === void 0 ? void 0 : _g.position) === null || _h === void 0 ? void 0 : _h.y;\n        this.isSizeImages = ((_k = (_j = settings.images) === null || _j === void 0 ? void 0 : _j.options) === null || _k === void 0 ? void 0 : _k.size) !== undefined;\n        this.widthImages = (_o = (_m = (_l = settings.images) === null || _l === void 0 ? void 0 : _l.options) === null || _m === void 0 ? void 0 : _m.size) === null || _o === void 0 ? void 0 : _o.width;\n        this.heightImages = (_r = (_q = (_p = settings.images) === null || _p === void 0 ? void 0 : _p.options) === null || _q === void 0 ? void 0 : _q.size) === null || _r === void 0 ? void 0 : _r.height;\n        this.isTrimImages = ((_t = (_s = settings.images) === null || _s === void 0 ? void 0 : _s.options) === null || _t === void 0 ? void 0 : _t.trim) !== undefined;\n        this.xTrimImages = (_w = (_v = (_u = settings.images) === null || _u === void 0 ? void 0 : _u.options) === null || _v === void 0 ? void 0 : _v.trim) === null || _w === void 0 ? void 0 : _w.x;\n        this.yTrimImages = (_z = (_y = (_x = settings.images) === null || _x === void 0 ? void 0 : _x.options) === null || _y === void 0 ? void 0 : _y.trim) === null || _z === void 0 ? void 0 : _z.y;\n        this.widthTrimImages = (_2 = (_1 = (_0 = settings.images) === null || _0 === void 0 ? void 0 : _0.options) === null || _1 === void 0 ? void 0 : _1.trim) === null || _2 === void 0 ? void 0 : _2.width;\n        this.heightTrimImages = (_5 = (_4 = (_3 = settings.images) === null || _3 === void 0 ? void 0 : _3.options) === null || _4 === void 0 ? void 0 : _4.trim) === null || _5 === void 0 ? void 0 : _5.height;\n        // Optional\n        this.fps = typeof settings.fps === 'number' && 60 >= settings.fps && settings.fps > 0 ? settings.fps : 60;\n        this.direction = (_6 = settings.direction) !== null && _6 !== void 0 ? _6 : 1;\n        this.loop = (_7 = settings.loop) !== null && _7 !== void 0 ? _7 : true;\n        this.startIndex = (_8 = settings.startIndex) !== null && _8 !== void 0 ? _8 : 0;\n        this.finishIndex = (_9 = settings.finishIndex) !== null && _9 !== void 0 ? _9 : (settings.images.paths.length ? settings.images.paths.length - 1 : 0);\n        this.currentIndex = (_10 = settings.currentIndex) !== null && _10 !== void 0 ? _10 : 0;\n        this.startImmediately = (_11 = settings.startImmediately) !== null && _11 !== void 0 ? _11 : false;\n        this.startAfterLoaded = (_12 = settings.startAfterLoaded) !== null && _12 !== void 0 ? _12 : true;\n        this.initiate = (_13 = settings.init) !== null && _13 !== void 0 ? _13 : true;\n        this.logging = (_14 = settings.logging) !== null && _14 !== void 0 ? _14 : false;\n        if (settings.on) {\n            this.addListenersBeforeInitialization(settings.on);\n        }\n        if (this.initiate) {\n            this.init();\n        }\n    }\n    /**\n     * This method loads the image by index.\n     *\n     * @method\n     * @private\n     * @name this.#loadImage\n     * @param {number} index Index of element in image array.\n     * @return {void}\n     */\n    loadImage(index) {\n        this.images[index].state = 'LOADING';\n        this.canvas.dispatchEvent(this.events.load);\n        const img = new Image();\n        img.src = this.images[index].path;\n        img.onload = () => {\n            this.images[index].state = 'LOADED';\n            this.images[index].image = img;\n            this.canvas.dispatchEvent(this.events.loaded);\n            if (!this.rendering &&\n                (this.startImmediately ||\n                    this.startAfterLoaded &&\n                        this.isLoadedFrames())) {\n                this.currentIndex === this.startIndex ? this.start() : this.play();\n            }\n        };\n        img.onerror = () => {\n            this.images[index].state = 'ERROR';\n        };\n    }\n    /**\n     * Changing the rendering flag.\n     *\n     * @method\n     * @private\n     * @name this.#setRendering\n     * @param {boolean} isRendering\n     * @return {void}\n     */\n    setRendering(isRendering) {\n        this.rendering = isRendering;\n    }\n    /**\n     * The method starts the rendering loop\n     *\n     * @method\n     * @private\n     * @name this.#startRender\n     * @return {void}\n     */\n    startRender() {\n        this.setRendering(true);\n        this.drawImage(this.currentIndex);\n        this.fpsInterval = 1000 / this.fps;\n        this.then = Date.now();\n        this.startTime = this.then;\n        __classPrivateFieldGet(this, _SequenceCanvas_render, \"f\").call(this);\n    }\n    /**\n     * Logic for changing images\n     *\n     * @method\n     * @private\n     * @name logic\n     * @return {void}\n     */\n    logic() {\n        if (this.direction > 0) {\n            if (this.loop) {\n                if (this.currentIndex === this.finishIndex) {\n                    this.setCurrentImage(this.startIndex);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex + 1);\n                }\n            }\n            else {\n                if (this.currentIndex === this.finishIndex) {\n                    this.setRendering(false);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex + 1);\n                }\n            }\n        }\n        else {\n            if (this.loop) {\n                if (this.currentIndex === this.startIndex) {\n                    this.setCurrentImage(this.finishIndex);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex - 1);\n                }\n            }\n            else {\n                if (this.currentIndex === this.startIndex) {\n                    this.setRendering(false);\n                }\n                else {\n                    this.setCurrentImage(this.currentIndex - 1);\n                }\n            }\n        }\n        this.drawImage(this.currentIndex);\n    }\n    /**\n     * Drawing an image by index\n     *\n     * @method\n     * @public\n     * @name drawImage\n     * @param {number} indexImage Index of the image in the array\n     * @return {void}\n     */\n    drawImage(indexImage) {\n        if (this.images[indexImage].state !== 'LOADED' || !this.images[indexImage].image) {\n            if (this.logging)\n                console.log('not rendered', indexImage, this.images[indexImage]);\n            return;\n        }\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        if (this.logging)\n            console.log('rendered:', indexImage, this.images[indexImage]);\n        this.canvas.dispatchEvent(this.events.render);\n        if (this.isTrimImages) {\n            if (this.isSizeImages && this.isPositionImages) {\n                // trim + size + pos\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthTrimImages, this.heightTrimImages, this.xPosImages, this.yPosImages, this.widthImages, this.heightImages);\n                return;\n            }\n            else if (this.isSizeImages) {\n                // trim + size\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthTrimImages, this.heightTrimImages, 0, 0, this.widthImages, this.heightImages);\n                return;\n            }\n            else if (this.isPositionImages) {\n                // trim + pos\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthCanvas, this.heightCanvas, this.xPosImages, this.yPosImages, this.widthImages, this.heightImages);\n            }\n            else {\n                // trim\n                this.context.drawImage(this.images[indexImage].image, this.xTrimImages, this.yTrimImages, this.widthCanvas, this.heightCanvas, 0, 0, this.widthImages, this.heightImages);\n            }\n        }\n        if (this.isSizeImages) {\n            if (this.isPositionImages) {\n                // size + pos\n                this.context.drawImage(this.images[indexImage].image, this.xPosImages, this.yPosImages, this.widthImages, this.heightImages);\n                return;\n            }\n            else {\n                // size\n                this.context.drawImage(this.images[indexImage].image, 0, 0, this.widthImages, this.heightImages);\n                return;\n            }\n        }\n        if (this.isPositionImages) {\n            // pos\n            this.context.drawImage(this.images[indexImage].image, this.xPosImages, this.yPosImages);\n            return;\n        }\n        // default\n        this.context.drawImage(this.images[indexImage].image, 0, 0);\n    }\n    /**\n     * Initializing canvas and image array (possibly downloading them)\n     *\n     * @method\n     * @public\n     * @name init\n     * @return {void}\n     */\n    init() {\n        this.canvas.dispatchEvent(this.events.init);\n        this.setSizesCanvas({ width: this.widthCanvas, height: this.heightCanvas });\n        this.images.forEach((_, index) => {\n            this.loadImage(index);\n        });\n    }\n    /**\n     * This method checks if all images are loaded\n     *\n     * @method\n     * @public\n     * @name isLoadedFrames\n     * @return {boolean}\n     */\n    isLoadedFrames() {\n        return this.images.every(img => img.state === \"LOADED\");\n    }\n    /**\n     * Start rendering from the starting image\n     *\n     * @method\n     * @public\n     * @name start\n     * @return {void}\n     */\n    start() {\n        this.currentIndex = this.startIndex;\n        this.canvas.dispatchEvent(this.events.start);\n        this.startRender();\n    }\n    /**\n     * Start rendering from the current image\n     *\n     * @method\n     * @public\n     * @name play\n     * @return {void}\n     */\n    // Запуск рендеринга\n    play() {\n        this.canvas.dispatchEvent(this.events.play);\n        this.startRender();\n    }\n    /**\n     * Pausing rendering and displaying the initial image\n     *\n     * @method\n     * @public\n     * @name stop\n     * @return {void}\n     */\n    stop() {\n        this.canvas.dispatchEvent(this.events.stop);\n        this.setRendering(false);\n        this.setCurrentImage(this.startIndex);\n        this.drawImage(this.startIndex);\n    }\n    /**\n     * Pause rendering\n     *\n     * @method\n     * @public\n     * @name pause\n     * @return {void}\n     */\n    pause() {\n        this.canvas.dispatchEvent(this.events.pause);\n        this.setRendering(false);\n    }\n    /**\n     * Attaches a listener to an event\n     *\n     * @method\n     * @public\n     * @name on\n     * @param {EventSequenceCanvas} eventName\n     * @param {(event: CustomEvent) => void} callback\n     * @return {void}\n     */\n    on(eventName, callback) {\n        this.canvas.addEventListener(eventName, callback.bind(this));\n    }\n    /**\n     * Removing an event listener\n     *\n     * @method\n     * @public\n     * @name off\n     * @param {EventSequenceCanvas} eventName\n     * @param {(event: CustomEvent) => void} callback\n     * @return {void}\n     */\n    off(eventName, callback) {\n        this.canvas.removeEventListener(eventName, callback.bind(this));\n    }\n    /**\n     * Set current image\n     *\n     * @method\n     * @public\n     * @name setCurrentImage\n     * @param {number} indexImage Index of the image in the array\n     * @return {void}\n     */\n    setCurrentImage(indexImage) {\n        this.currentIndex = indexImage;\n    }\n    /**\n     * Get current image\n     *\n     * @method\n     * @public\n     * @name getCurrentImage\n     * @return {number}\n     */\n    getCurrentImage() {\n        return this.currentIndex;\n    }\n    /**\n     * The method sets the size of the canvas\n     *\n     * @method\n     * @public\n     * @name setSizesCanvas\n     * @param {width: number, height: number} sizes Dimensions\n     * @return {void}\n     */\n    setSizesCanvas(sizes) {\n        if (sizes.width) {\n            this.canvas.width = sizes.width;\n            this.widthCanvas = sizes.width;\n        }\n        else {\n            this.widthCanvas = this.canvas.width;\n        }\n        if (sizes.height) {\n            this.canvas.height = sizes.height;\n            this.heightCanvas = sizes.height;\n        }\n        else {\n            this.heightCanvas = this.canvas.height;\n        }\n    }\n    /**\n     * The method gets the size of the canvas\n     *\n     * @method\n     * @public\n     * @name getSizesCanvas\n     * @return {{width: number, height: number}}\n     */\n    getSizesCanvas() {\n        return {\n            width: this.widthCanvas,\n            height: this.heightCanvas,\n        };\n    }\n    /**\n     * Set image options\n     *\n     * @method\n     * @public\n     * @name setImageOptions\n     * @param {ImageOptionsSequenceCanvas} options\n     * @return {void}\n     */\n    setImageOptions(options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.isPositionImages = (options === null || options === void 0 ? void 0 : options.position) !== undefined;\n        this.xPosImages = (_a = options.position) === null || _a === void 0 ? void 0 : _a.x;\n        this.yPosImages = (_b = options.position) === null || _b === void 0 ? void 0 : _b.y;\n        this.isSizeImages = (options === null || options === void 0 ? void 0 : options.size) !== undefined;\n        this.widthImages = (_c = options.size) === null || _c === void 0 ? void 0 : _c.width;\n        this.heightImages = (_d = options.size) === null || _d === void 0 ? void 0 : _d.height;\n        this.isTrimImages = (options === null || options === void 0 ? void 0 : options.trim) !== undefined;\n        this.xTrimImages = (_e = options.trim) === null || _e === void 0 ? void 0 : _e.x;\n        this.yTrimImages = (_f = options.trim) === null || _f === void 0 ? void 0 : _f.y;\n        this.widthTrimImages = (_g = options.trim) === null || _g === void 0 ? void 0 : _g.width;\n        this.heightTrimImages = (_h = options.trim) === null || _h === void 0 ? void 0 : _h.height;\n    }\n    /**\n     * Get image settings\n     *\n     * @method\n     * @public\n     * @name getImageSettings\n     * @return {ReturnImageOptionsSequenceCanvas}\n     */\n    getImageSettings() {\n        return {\n            position: {\n                x: this.xPosImages,\n                y: this.yPosImages\n            },\n            trim: {\n                x: this.xTrimImages,\n                y: this.yTrimImages,\n                width: this.widthTrimImages,\n                height: this.heightTrimImages\n            },\n            size: {\n                width: this.widthImages,\n                height: this.heightImages\n            }\n        };\n    }\n    /**\n     * Set fps\n     *\n     * @method\n     * @public\n     * @name setFps\n     * @param {number} value\n     * @return {void}\n     */\n    setFps(value) {\n        this.fps = 60 >= value && value > 0 ? value : 60;\n    }\n    /**\n     * Get fps\n     *\n     * @method\n     * @public\n     * @name getFps\n     * @return {number}\n     */\n    getFps() {\n        return this.fps;\n    }\n    /**\n     * Set direction\n     *\n     * @method\n     * @public\n     * @name setDirection\n     * @param {DirectionSequenceCanvas} value\n     * @return {void}\n     */\n    setDirection(value) {\n        this.direction = value;\n    }\n    /**\n     * Get direction\n     *\n     * @method\n     * @public\n     * @name getDirection\n     * @return {DirectionSequenceCanvas}\n     */\n    getDirection() {\n        return this.direction;\n    }\n    /**\n     * Set loop\n     *\n     * @method\n     * @public\n     * @name setLoop\n     * @param {boolean} value\n     * @return {void}\n     */\n    setLoop(value) {\n        this.loop = value;\n    }\n    /**\n     * Get loop\n     *\n     * @method\n     * @public\n     * @name getLoop\n     * @return {boolean}\n     */\n    getLoop() {\n        return this.loop;\n    }\n    /**\n     * Set start index\n     *\n     * @method\n     * @public\n     * @name setStartIndex\n     * @param {number} index\n     * @return {void}\n     */\n    setStartIndex(index) {\n        if (index > this.images.length) {\n            this.startIndex = this.images.length;\n            return;\n        }\n        if (index < 0) {\n            this.startIndex = 0;\n            return;\n        }\n        this.startIndex = index;\n    }\n    /**\n     * Get start index\n     *\n     * @method\n     * @public\n     * @name getStartIndex\n     * @return {number}\n     */\n    getStartIndex() {\n        return this.startIndex;\n    }\n    /**\n     * Set finish index\n     *\n     * @method\n     * @public\n     * @name setFinishIndex\n     * @param {number} index\n     * @return {void}\n     */\n    setFinishIndex(index) {\n        if (index > this.images.length) {\n            this.finishIndex = this.images.length;\n            return;\n        }\n        if (index < 0) {\n            this.finishIndex = 0;\n            return;\n        }\n        this.finishIndex = index;\n    }\n    /**\n     * Get finish index\n     *\n     * @method\n     * @public\n     * @name getFinishIndex\n     * @return {number}\n     */\n    getFinishIndex() {\n        return this.finishIndex;\n    }\n    /**\n     * Enable logging\n     *\n     * @method\n     * @public\n     * @name enableLogging\n     * @return {void}\n     */\n    enableLogging() {\n        this.logging = true;\n    }\n    /**\n     * Disable logging\n     *\n     * @method\n     * @public\n     * @name disableLogging\n     * @return {void}\n     */\n    disableLogging() {\n        this.logging = false;\n    }\n    /**\n     * Get logging\n     *\n     * @method\n     * @public\n     * @name getLogging\n     * @return {void}\n     */\n    getLogging() {\n        return this.logging;\n    }\n}\n_SequenceCanvas_render = new WeakMap();\nexports.default = SequenceCanvas;\n"],"names":["__webpack_exports__","_SequenceCanvas_render","__classPrivateFieldGet","this","receiver","state","kind","f","TypeError","has","call","value","get","Object","defineProperty","exports","WeakMap","constructor","settings","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","_p","_q","_r","_s","_t","_u","_v","_w","_x","_y","_z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","initiate","logging","rendering","requestId","fpsInterval","now","then","startTime","elapsed","events","init","CustomEvent","bubbles","load","loaded","render","start","play","stop","pause","set","requestAnimationFrame","Date","logic","cancelAnimationFrame","addListenersBeforeInitialization","listeners","key","canvas","addEventListener","bind","element","context","getContext","widthCanvas","width","heightCanvas","height","images","paths","map","path","isPositionImages","undefined","options","position","xPosImages","x","yPosImages","y","isSizeImages","size","widthImages","heightImages","isTrimImages","trim","xTrimImages","yTrimImages","widthTrimImages","heightTrimImages","fps","direction","loop","startIndex","finishIndex","length","currentIndex","startImmediately","startAfterLoaded","on","loadImage","index","dispatchEvent","img","Image","src","onload","image","isLoadedFrames","onerror","setRendering","isRendering","startRender","drawImage","setCurrentImage","indexImage","clearRect","console","log","setSizesCanvas","forEach","_","every","eventName","callback","off","removeEventListener","getCurrentImage","sizes","getSizesCanvas","setImageOptions","getImageSettings","setFps","getFps","setDirection","getDirection","setLoop","getLoop","setStartIndex","getStartIndex","setFinishIndex","getFinishIndex","enableLogging","disableLogging","getLogging"],"sourceRoot":""}